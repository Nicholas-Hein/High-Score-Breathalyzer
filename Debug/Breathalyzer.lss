
Breathalyzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00002962  000029f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002962  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800210  00800210  00002b06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002b06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00002ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002986  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c76  00000000  00000000  00005706  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011bb  00000000  00000000  0000637c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000574  00000000  00000000  00007538  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000088a  00000000  00000000  00007aac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001de5  00000000  00000000  00008336  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  0000a11b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__ctors_end>
       4:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
       8:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
       c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      10:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      14:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      18:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      1c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      20:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      24:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      28:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      2c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      30:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      34:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      38:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      3c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      40:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      44:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      48:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      4c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      50:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      54:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      58:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      5c:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      60:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      64:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <__bad_interrupt>
      68:	08 4a       	sbci	r16, 0xA8	; 168
      6a:	d7 3b       	cpi	r29, 0xB7	; 183
      6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
      6e:	01 6e       	ori	r16, 0xE1	; 225
      70:	84 bc       	out	0x24, r8	; 36
      72:	bf fd       	.word	0xfdbf	; ????
      74:	c1 2f       	mov	r28, r17
      76:	3d 6c       	ori	r19, 0xCD	; 205
      78:	74 31       	cpi	r23, 0x14	; 20
      7a:	9a bd       	out	0x2a, r25	; 42
      7c:	56 83       	std	Z+6, r21	; 0x06
      7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
      80:	3d 00       	.word	0x003d	; ????
      82:	c7 7f       	andi	r28, 0xF7	; 247
      84:	11 be       	out	0x31, r1	; 49
      86:	d9 e4       	ldi	r29, 0x49	; 73
      88:	bb 4c       	sbci	r27, 0xCB	; 203
      8a:	3e 91       	ld	r19, -X
      8c:	6b aa       	std	Y+51, r6	; 0x33
      8e:	aa be       	out	0x3a, r10	; 58
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	3f 07       	cpc	r19, r31
      96:	63 42       	sbci	r22, 0x23	; 35
      98:	36 b7       	in	r19, 0x36	; 54
      9a:	9b d8       	rcall	.-3786   	; 0xfffff1d2 <__eeprom_end+0xff7ef1d2>
      9c:	a7 1a       	sub	r10, r23
      9e:	39 68       	ori	r19, 0x89	; 137
      a0:	56 18       	sub	r5, r6
      a2:	ae ba       	out	0x1e, r10	; 30
      a4:	ab 55       	subi	r26, 0x5B	; 91
      a6:	8c 1d       	adc	r24, r12
      a8:	3c b7       	in	r19, 0x3c	; 60
      aa:	cc 57       	subi	r28, 0x7C	; 124
      ac:	63 bd       	out	0x23, r22	; 35
      ae:	6d ed       	ldi	r22, 0xDD	; 221
      b0:	fd 75       	andi	r31, 0x5D	; 93
      b2:	3e f6       	brtc	.-114    	; 0x42 <__SREG__+0x3>
      b4:	17 72       	andi	r17, 0x27	; 39
      b6:	31 bf       	out	0x31, r19	; 49
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 05       	cpc	r19, r15
      be:	a8 4c       	sbci	r26, 0xC8	; 200
      c0:	cd b2       	in	r12, 0x1d	; 29
      c2:	d4 4e       	sbci	r29, 0xE4	; 228
      c4:	b9 38       	cpi	r27, 0x89	; 137
      c6:	36 a9       	ldd	r19, Z+54	; 0x36
      c8:	02 0c       	add	r0, r2
      ca:	50 b9       	out	0x00, r21	; 0
      cc:	91 86       	std	Z+9, r9	; 0x09
      ce:	88 08       	sbc	r8, r8
      d0:	3c a6       	std	Y+44, r3	; 0x2c
      d2:	aa aa       	std	Y+50, r10	; 0x32
      d4:	2a be       	out	0x3a, r2	; 58
      d6:	00 00       	nop
      d8:	00 80       	ld	r0, Z
      da:	3f 08       	sbc	r3, r15
      dc:	00 00       	nop
      de:	00 be       	out	0x30, r0	; 48
      e0:	92 24       	eor	r9, r2
      e2:	49 12       	cpse	r4, r25
      e4:	3e ab       	std	Y+54, r19	; 0x36
      e6:	aa aa       	std	Y+50, r10	; 0x32
      e8:	2a be       	out	0x3a, r2	; 58
      ea:	cd cc       	rjmp	.-1638   	; 0xfffffa86 <__eeprom_end+0xff7efa86>
      ec:	cc 4c       	sbci	r28, 0xCC	; 204
      ee:	3e 00       	.word	0x003e	; ????
      f0:	00 00       	nop
      f2:	80 be       	out	0x30, r8	; 48
      f4:	ab aa       	std	Y+51, r10	; 0x33
      f6:	aa aa       	std	Y+50, r10	; 0x32
      f8:	3e 00       	.word	0x003e	; ????
      fa:	00 00       	nop
      fc:	00 bf       	out	0x30, r16	; 48
      fe:	00 00       	nop
     100:	00 80       	ld	r0, Z
     102:	3f 00       	.word	0x003f	; ????
     104:	00 00       	nop
     106:	00 00       	nop
     108:	08 41       	sbci	r16, 0x18	; 24
     10a:	78 d3       	rcall	.+1776   	; 0x7fc <__LOCK_REGION_LENGTH__+0x3fc>
     10c:	bb 43       	sbci	r27, 0x3B	; 59
     10e:	87 d1       	rcall	.+782    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     110:	13 3d       	cpi	r17, 0xD3	; 211
     112:	19 0e       	add	r1, r25
     114:	3c c3       	rjmp	.+1656   	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     116:	bd 42       	sbci	r27, 0x2D	; 45
     118:	82 ad       	ldd	r24, Z+58	; 0x3a
     11a:	2b 3e       	cpi	r18, 0xEB	; 235
     11c:	68 ec       	ldi	r22, 0xC8	; 200
     11e:	82 76       	andi	r24, 0x62	; 98
     120:	be d9       	rcall	.-3204   	; 0xfffff49e <__eeprom_end+0xff7ef49e>
     122:	8f e1       	ldi	r24, 0x1F	; 31
     124:	a9 3e       	cpi	r26, 0xE9	; 233
     126:	4c 80       	ldd	r4, Y+4	; 0x04
     128:	ef ff       	.word	0xffef	; ????
     12a:	be 01       	movw	r22, r28
     12c:	c4 ff       	sbrs	r28, 4
     12e:	7f 3f       	cpi	r23, 0xFF	; 255
     130:	00 00       	nop
     132:	00 00       	nop
	...

00000136 <__trampolines_end>:
     136:	ae 20       	and	r10, r14
     138:	00 b0       	in	r0, 0x00	; 0
     13a:	c8 00       	.word	0x00c8	; ????
     13c:	10 40       	sbci	r17, 0x00	; 0
     13e:	81 3f       	cpi	r24, 0xF1	; 241
     140:	a1 a6       	std	Z+41, r10	; 0x29
     142:	a8 3f       	cpi	r26, 0xF8	; 248
     144:	a4 d3       	rcall	.+1864   	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
     146:	00 d5       	rcall	.+2560   	; 0xb48 <ListenKeyPress+0x10>
     148:	f0 d9       	rcall	.-3104   	; 0xfffff52a <__eeprom_end+0xff7ef52a>
     14a:	22 da       	rcall	.-3004   	; 0xfffff590 <__eeprom_end+0xff7ef590>
     14c:	12 db       	rcall	.-2524   	; 0xfffff772 <__eeprom_end+0xff7ef772>
     14e:	20 8d       	ldd	r18, Z+24	; 0x18
     150:	14 af       	std	Z+60, r17	; 0x3c

00000152 <ssd1306xled_font6x8>:
	...
     15a:	00 2f 00 00 00 00 07 00 07 00 00 14 7f 14 7f 14     ./..............
     16a:	00 24 2a 7f 2a 12 00 62 64 08 13 23 00 36 49 55     .$*.*..bd..#.6IU
     17a:	22 50 00 00 05 03 00 00 00 00 1c 22 41 00 00 00     "P........."A...
     18a:	41 22 1c 00 00 14 08 3e 08 14 00 08 08 3e 08 08     A".....>.....>..
     19a:	00 00 00 a0 60 00 00 08 08 08 08 08 00 00 60 60     ....`.........``
     1aa:	00 00 00 20 10 08 04 02 00 3e 51 49 45 3e 00 00     ... .....>QIE>..
     1ba:	42 7f 40 00 00 42 61 51 49 46 00 21 41 45 4b 31     B.@..BaQIF.!AEK1
     1ca:	00 18 14 12 7f 10 00 27 45 45 45 39 00 3c 4a 49     .......'EEE9.<JI
     1da:	49 30 00 01 71 09 05 03 00 36 49 49 49 36 00 06     I0..q....6III6..
     1ea:	49 49 29 1e 00 00 36 36 00 00 00 00 56 36 00 00     II)...66....V6..
     1fa:	00 08 14 22 41 00 00 14 14 14 14 14 00 00 41 22     ..."A.........A"
     20a:	14 08 00 02 01 51 09 06 00 32 49 59 51 3e 00 7c     .....Q...2IYQ>.|
     21a:	12 11 12 7c 00 7f 49 49 49 36 00 3e 41 41 41 22     ...|..III6.>AAA"
     22a:	00 7f 41 41 22 1c 00 7f 49 49 49 41 00 7f 09 09     ..AA"...IIIA....
     23a:	09 01 00 3e 41 49 49 7a 00 7f 08 08 08 7f 00 00     ...>AIIz........
     24a:	41 7f 41 00 00 20 40 41 3f 01 00 7f 08 14 22 41     A.A.. @A?....."A
     25a:	00 7f 40 40 40 40 00 7f 02 0c 02 7f 00 7f 04 08     ..@@@@..........
     26a:	10 7f 00 3e 41 41 41 3e 00 7f 09 09 09 06 00 3e     ...>AAA>.......>
     27a:	41 51 21 5e 00 7f 09 19 29 46 00 46 49 49 49 31     AQ!^....)F.FIII1
     28a:	00 01 01 7f 01 01 00 3f 40 40 40 3f 00 1f 20 40     .......?@@@?.. @
     29a:	20 1f 00 3f 40 38 40 3f 00 63 14 08 14 63 00 07      ..?@8@?.c...c..
     2aa:	08 70 08 07 00 61 51 49 45 43 00 00 7f 41 41 00     .p...aQIEC...AA.
     2ba:	00 55 2a 55 2a 55 00 00 41 41 7f 00 00 04 02 01     .U*U*U..AA......
     2ca:	02 04 00 40 40 40 40 40 00 00 01 02 04 00 00 20     ...@@@@@....... 
     2da:	54 54 54 78 00 7f 48 44 44 38 00 38 44 44 44 20     TTTx..HDD8.8DDD 
     2ea:	00 38 44 44 48 7f 00 38 54 54 54 18 00 08 7e 09     .8DDH..8TTT...~.
     2fa:	01 02 00 18 a4 a4 a4 7c 00 7f 08 04 04 78 00 00     .......|.....x..
     30a:	44 7d 40 00 00 40 80 84 7d 00 00 7f 10 28 44 00     D}@..@..}....(D.
     31a:	00 00 41 7f 40 00 00 7c 04 18 04 78 00 7c 08 04     ..A.@..|...x.|..
     32a:	04 78 00 38 44 44 44 38 00 fc 24 24 24 18 00 18     .x.8DDD8..$$$...
     33a:	24 24 18 fc 00 7c 08 04 04 08 00 48 54 54 54 20     $$...|.....HTTT 
     34a:	00 04 3f 44 40 20 00 3c 40 40 20 7c 00 1c 20 40     ..?D@ .<@@ |.. @
     35a:	20 1c 00 3c 40 30 40 3c 00 44 28 10 28 44 00 1c      ..<@0@<.D(.(D..
     36a:	a0 a0 a0 7c 00 44 64 54 4c 44 14 14 14 14 14 14     ...|.DdTLD......

0000037a <ssd1306xled_font8x16>:
	...
     38a:	00 00 00 f8 00 00 00 00 00 00 00 33 30 00 00 00     ...........30...
     39a:	00 10 0c 06 10 0c 06 00 00 00 00 00 00 00 00 00     ................
     3aa:	40 c0 78 40 c0 78 40 00 04 3f 04 04 3f 04 04 00     @.x@.x@..?..?...
     3ba:	00 70 88 fc 08 30 00 00 00 18 20 ff 21 1e 00 00     .p...0.... .!...
     3ca:	f0 08 f0 00 e0 18 00 00 00 21 1c 03 1e 21 1e 00     .........!...!..
     3da:	00 f0 08 88 70 00 00 00 1e 21 23 24 19 27 21 10     ....p....!#$.'!.
     3ea:	10 16 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3fa:	00 00 00 e0 18 04 02 00 00 00 00 07 18 20 40 00     ............. @.
     40a:	00 02 04 18 e0 00 00 00 00 40 20 18 07 00 00 00     .........@ .....
     41a:	40 40 80 f0 80 40 40 00 02 02 01 0f 01 02 02 00     @@...@@.........
     42a:	00 00 00 f0 00 00 00 00 01 01 01 1f 01 01 01 00     ................
	...
     442:	80 b0 70 00 00 00 00 00 00 00 00 00 00 00 00 00     ..p.............
     452:	00 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
     462:	00 30 30 00 00 00 00 00 00 00 00 00 80 60 18 04     .00..........`..
     472:	00 60 18 06 01 00 00 00 00 e0 10 08 08 10 e0 00     .`..............
     482:	00 0f 10 20 20 10 0f 00 00 10 10 f8 00 00 00 00     ...  ...........
     492:	00 20 20 3f 20 20 00 00 00 70 08 08 08 88 70 00     .  ?  ...p....p.
     4a2:	00 30 28 24 22 21 30 00 00 30 08 88 88 48 30 00     .0($"!0..0...H0.
     4b2:	00 18 20 20 20 11 0e 00 00 00 c0 20 10 f8 00 00     ..   ...... ....
     4c2:	00 07 04 24 24 3f 24 00 00 f8 08 88 88 08 08 00     ...$$?$.........
     4d2:	00 19 21 20 20 11 0e 00 00 e0 10 88 88 18 00 00     ..!  ...........
     4e2:	00 0f 11 20 20 11 0e 00 00 38 08 08 c8 38 08 00     ...  ....8...8..
     4f2:	00 00 00 3f 00 00 00 00 00 70 88 08 08 88 70 00     ...?.....p....p.
     502:	00 1c 22 21 21 22 1c 00 00 e0 10 08 08 10 e0 00     .."!!"..........
     512:	00 00 31 22 22 11 0f 00 00 00 00 c0 c0 00 00 00     ..1""...........
     522:	00 00 00 30 30 00 00 00 00 00 00 80 00 00 00 00     ...00...........
     532:	00 00 80 60 00 00 00 00 00 00 80 40 20 10 08 00     ...`.......@ ...
     542:	00 01 02 04 08 10 20 00 40 40 40 40 40 40 40 00     ...... .@@@@@@@.
     552:	04 04 04 04 04 04 04 00 00 08 10 20 40 80 00 00     ........... @...
     562:	00 20 10 08 04 02 01 00 00 70 48 08 08 08 f0 00     . .......pH.....
     572:	00 00 00 30 36 01 00 00 c0 30 c8 28 e8 10 e0 00     ...06....0.(....
     582:	07 18 27 24 23 14 0b 00 00 00 c0 38 e0 00 00 00     ..'$#......8....
     592:	20 3c 23 02 02 27 38 20 08 f8 88 88 88 70 00 00      <#..'8 .....p..
     5a2:	20 3f 20 20 20 11 0e 00 c0 30 08 08 08 08 38 00      ?   ....0....8.
     5b2:	07 18 20 20 20 10 08 00 08 f8 08 08 08 10 e0 00     ..   ...........
     5c2:	20 3f 20 20 20 10 0f 00 08 f8 88 88 e8 08 10 00      ?   ...........
     5d2:	20 3f 20 20 23 20 18 00 08 f8 88 88 e8 08 10 00      ?  # ..........
     5e2:	20 3f 20 00 03 00 00 00 c0 30 08 08 08 38 00 00      ? ......0...8..
     5f2:	07 18 20 20 22 1e 02 00 08 f8 08 00 00 08 f8 08     ..  "...........
     602:	20 3f 21 01 01 21 3f 20 00 08 08 f8 08 08 00 00      ?!..!? ........
     612:	00 20 20 3f 20 20 00 00 00 00 08 08 f8 08 08 00     .  ?  ..........
     622:	c0 80 80 80 7f 00 00 00 08 f8 88 c0 28 18 08 00     ............(...
     632:	20 3f 20 01 26 38 20 00 08 f8 08 00 00 00 00 00      ? .&8 .........
     642:	20 3f 20 20 20 20 30 00 08 f8 f8 00 f8 f8 08 00      ?    0.........
     652:	20 3f 00 3f 00 3f 20 00 08 f8 30 c0 00 08 f8 08      ?.?.? ...0.....
     662:	20 3f 20 00 07 18 3f 00 e0 10 08 08 08 10 e0 00      ? ...?.........
     672:	0f 10 20 20 20 10 0f 00 08 f8 08 08 08 08 f0 00     ..   ...........
     682:	20 3f 21 01 01 01 00 00 e0 10 08 08 08 10 e0 00      ?!.............
     692:	0f 18 24 24 38 50 4f 00 08 f8 88 88 88 88 70 00     ..$$8PO.......p.
     6a2:	20 3f 20 00 03 0c 30 20 00 70 88 08 08 08 38 00      ? ...0 .p....8.
     6b2:	00 38 20 21 21 22 1c 00 18 08 08 f8 08 08 18 00     .8 !!"..........
     6c2:	00 00 20 3f 20 00 00 00 08 f8 08 00 00 08 f8 08     .. ? ...........
     6d2:	00 1f 20 20 20 20 1f 00 08 78 88 00 00 c8 38 08     ..    ...x....8.
     6e2:	00 00 07 38 0e 01 00 00 f8 08 00 f8 00 08 f8 00     ...8............
     6f2:	03 3c 07 00 07 3c 03 00 08 18 68 80 80 68 18 08     .<...<....h..h..
     702:	20 30 2c 03 03 2c 30 20 08 38 c8 00 c8 38 08 00      0,..,0 .8...8..
     712:	00 00 20 3f 20 00 00 00 10 08 08 08 c8 38 08 00     .. ? ........8..
     722:	20 38 26 21 20 20 18 00 00 00 00 fe 02 02 02 00      8&!  ..........
     732:	00 00 00 7f 40 40 40 00 00 0c 30 c0 00 00 00 00     ....@@@...0.....
     742:	00 00 00 01 06 38 c0 00 00 02 02 02 fe 00 00 00     .....8..........
     752:	00 40 40 40 7f 00 00 00 00 00 04 02 02 02 04 00     .@@@............
	...
     772:	80 80 80 80 80 80 80 80 00 02 02 04 00 00 00 00     ................
	...
     78a:	00 00 80 80 80 80 00 00 00 19 24 22 22 22 3f 20     ..........$"""? 
     79a:	08 f8 00 80 80 00 00 00 00 3f 11 20 20 11 0e 00     .........?.  ...
     7aa:	00 00 00 80 80 80 00 00 00 0e 11 20 20 20 11 00     ...........   ..
     7ba:	00 00 00 80 80 88 f8 00 00 0e 11 20 20 10 3f 20     ...........  .? 
     7ca:	00 00 80 80 80 80 00 00 00 1f 22 22 22 22 13 00     ..........""""..
     7da:	00 80 80 f0 88 88 88 18 00 20 20 3f 20 20 00 00     .........  ?  ..
     7ea:	00 00 80 80 80 80 80 00 00 6b 94 94 94 93 60 00     .........k....`.
     7fa:	08 f8 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     80a:	00 80 98 98 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     81a:	00 00 00 80 98 98 00 00 00 c0 80 80 80 7f 00 00     ................
     82a:	08 f8 00 00 80 80 80 00 20 3f 24 02 2d 30 20 00     ........ ?$.-0 .
     83a:	00 08 08 f8 00 00 00 00 00 20 20 3f 20 20 00 00     .........  ?  ..
     84a:	80 80 80 80 80 80 80 00 20 3f 20 00 3f 20 00 3f     ........ ? .? .?
     85a:	80 80 00 80 80 80 00 00 20 3f 21 00 00 20 3f 20     ........ ?!.. ? 
     86a:	00 00 80 80 80 80 00 00 00 1f 20 20 20 20 1f 00     ..........    ..
     87a:	80 80 00 80 80 00 00 00 80 ff a1 20 20 11 0e 00     ...........  ...
     88a:	00 00 00 80 80 80 80 00 00 0e 11 20 20 a0 ff 80     ...........  ...
     89a:	80 80 80 00 80 80 80 00 20 20 3f 21 20 00 01 00     ........  ?! ...
     8aa:	00 00 80 80 80 80 80 00 00 33 24 24 24 24 19 00     .........3$$$$..
     8ba:	00 80 80 e0 80 80 00 00 00 00 00 1f 20 20 00 00     ............  ..
     8ca:	80 80 00 00 00 80 80 00 00 1f 20 20 20 10 3f 20     ..........   .? 
     8da:	80 80 80 00 00 80 80 80 00 01 0e 30 08 06 01 00     ...........0....
     8ea:	80 80 00 80 00 80 80 80 0f 30 0c 03 0c 30 0f 00     .........0...0..
     8fa:	00 80 80 00 80 80 80 00 00 20 31 2e 0e 31 20 00     ......... 1..1 .
     90a:	80 80 80 00 00 80 80 80 80 81 8e 70 18 06 01 00     ...........p....
     91a:	00 80 80 80 80 80 80 00 00 21 30 2c 22 21 30 00     .........!0,"!0.
     92a:	00 00 00 00 80 7c 02 02 00 00 00 00 00 3f 40 40     .....|.......?@@
     93a:	00 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
     94a:	00 02 02 7c 80 00 00 00 00 40 40 3f 00 00 00 00     ...|.....@@?....
     95a:	00 06 01 01 02 02 04 04 00 00 00 00 00 00 00 00     ................

0000096a <__ctors_end>:
     96a:	11 24       	eor	r1, r1
     96c:	1f be       	out	0x3f, r1	; 63
     96e:	cf ef       	ldi	r28, 0xFF	; 255
     970:	d8 e0       	ldi	r29, 0x08	; 8
     972:	de bf       	out	0x3e, r29	; 62
     974:	cd bf       	out	0x3d, r28	; 61

00000976 <__do_copy_data>:
     976:	12 e0       	ldi	r17, 0x02	; 2
     978:	a0 e0       	ldi	r26, 0x00	; 0
     97a:	b1 e0       	ldi	r27, 0x01	; 1
     97c:	e2 e6       	ldi	r30, 0x62	; 98
     97e:	f9 e2       	ldi	r31, 0x29	; 41
     980:	02 c0       	rjmp	.+4      	; 0x986 <__do_copy_data+0x10>
     982:	05 90       	lpm	r0, Z+
     984:	0d 92       	st	X+, r0
     986:	a0 31       	cpi	r26, 0x10	; 16
     988:	b1 07       	cpc	r27, r17
     98a:	d9 f7       	brne	.-10     	; 0x982 <__do_copy_data+0xc>

0000098c <__do_clear_bss>:
     98c:	22 e0       	ldi	r18, 0x02	; 2
     98e:	a0 e1       	ldi	r26, 0x10	; 16
     990:	b2 e0       	ldi	r27, 0x02	; 2
     992:	01 c0       	rjmp	.+2      	; 0x996 <.do_clear_bss_start>

00000994 <.do_clear_bss_loop>:
     994:	1d 92       	st	X+, r1

00000996 <.do_clear_bss_start>:
     996:	a9 31       	cpi	r26, 0x19	; 25
     998:	b2 07       	cpc	r27, r18
     99a:	e1 f7       	brne	.-8      	; 0x994 <.do_clear_bss_loop>
     99c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <main>
     9a0:	0c 94 af 14 	jmp	0x295e	; 0x295e <_exit>

000009a4 <__bad_interrupt>:
     9a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009a8 <USART0SendByte>:
	//Convert to ratio
	return (double)ADCW / 1023.0;
}

int USART0SendByte(char data, FILE *stream)
{
     9a8:	cf 93       	push	r28
     9aa:	c8 2f       	mov	r28, r24
	if(data == '\n')
     9ac:	8a 30       	cpi	r24, 0x0A	; 10
     9ae:	19 f4       	brne	.+6      	; 0x9b6 <USART0SendByte+0xe>
	{
		USART0SendByte('\r', stream);
     9b0:	8d e0       	ldi	r24, 0x0D	; 13
     9b2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <USART0SendByte>
	}

	//Wait while previous byte is being sent.
	while(!(UCSR0A & (1 << UDRE0)));
     9b6:	e0 ec       	ldi	r30, 0xC0	; 192
     9b8:	f0 e0       	ldi	r31, 0x00	; 0
     9ba:	80 81       	ld	r24, Z
     9bc:	85 ff       	sbrs	r24, 5
     9be:	fd cf       	rjmp	.-6      	; 0x9ba <USART0SendByte+0x12>
	//Transmit data
	UDR0 = data;
     9c0:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	return 0;
}
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <Initialize>:
{
	//////////////////////////////////////////////////////////////////////////
	//Initialize Outputs
	//////////////////////////////////////////////////////////////////////////
	//Set as outputs: PB1 - PB5 (LED 1 - 5)
	DDRB |= 0x3E;
     9cc:	84 b1       	in	r24, 0x04	; 4
     9ce:	8e 63       	ori	r24, 0x3E	; 62
     9d0:	84 b9       	out	0x04, r24	; 4
	//Turn off: PB1 - PB5 (LED 1 - 5)
	PORTB &= 0xC0;
     9d2:	85 b1       	in	r24, 0x05	; 5
     9d4:	80 7c       	andi	r24, 0xC0	; 192
     9d6:	85 b9       	out	0x05, r24	; 5

	//////////////////////////////////////////////////////////////////////////
	//Initialize Inputs
	//////////////////////////////////////////////////////////////////////////
	//Set as input: PC0 - PC3 (Sample Button, Reset Button, Override Jumper, MQ3 Input)
	DDRC &= ~0x0F;
     9d8:	87 b1       	in	r24, 0x07	; 7
     9da:	80 7f       	andi	r24, 0xF0	; 240
     9dc:	87 b9       	out	0x07, r24	; 7

	//////////////////////////////////////////////////////////////////////////
	//Set up ADC
	//////////////////////////////////////////////////////////////////////////
	//Disable other reference sources. Use AVCC (5V) reference source.
	ADMUX = (1 << REFS0);
     9de:	80 e4       	ldi	r24, 0x40	; 64
     9e0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	//Set clocking for ADC between 50 and 200kHz by prescalling the system clock (16MHz / 128)
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
     9e4:	ea e7       	ldi	r30, 0x7A	; 122
     9e6:	f0 e0       	ldi	r31, 0x00	; 0
     9e8:	80 81       	ld	r24, Z
     9ea:	87 60       	ori	r24, 0x07	; 7
     9ec:	80 83       	st	Z, r24
	//Enable ADC module
	ADCSRA |= (1 << ADEN);
     9ee:	80 81       	ld	r24, Z
     9f0:	80 68       	ori	r24, 0x80	; 128
     9f2:	80 83       	st	Z, r24
	
	//////////////////////////////////////////////////////////////////////////
	//Set up USART0
	//////////////////////////////////////////////////////////////////////////
	//Set BAUD rate
	UBRR0H = (uint8_t)(UBRR_VALUE >> 8);
     9f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)UBRR_VALUE;
     9f8:	85 e0       	ldi	r24, 0x05	; 5
     9fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     9fe:	e2 ec       	ldi	r30, 0xC2	; 194
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	80 81       	ld	r24, Z
     a04:	86 60       	ori	r24, 0x06	; 6
     a06:	80 83       	st	Z, r24
	
	//Enable transmission and reception
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     a08:	e1 ec       	ldi	r30, 0xC1	; 193
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	80 81       	ld	r24, Z
     a0e:	88 61       	ori	r24, 0x18	; 24
     a10:	80 83       	st	Z, r24
	//Set up standard output
	stdout = &USART0_Stream;
     a12:	80 e0       	ldi	r24, 0x00	; 0
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <__iob+0x3>
     a1a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <__iob+0x2>


	//Transmit: Set up completed.
	printf("\xFF");
     a1e:	8f ef       	ldi	r24, 0xFF	; 255
     a20:	9f ef       	ldi	r25, 0xFF	; 255
     a22:	0e 94 b8 11 	call	0x2370	; 0x2370 <putchar>
     a26:	08 95       	ret

00000a28 <PlaySplashScreen>:
//>> SPLASH SCREEN
//Breathalyzer
//By Paradox Computing
void PlaySplashScreen(void)
{
	ssd1306_clear();
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
	//Writes Splash Screen
	ssd1306_string_font8x16xy(24, 0, "High Score");
     a2e:	4e e0       	ldi	r20, 0x0E	; 14
     a30:	51 e0       	ldi	r21, 0x01	; 1
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	88 e1       	ldi	r24, 0x18	; 24
     a36:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_string_font8x16xy(16, 2, "Breathalyzer");
     a3a:	49 e1       	ldi	r20, 0x19	; 25
     a3c:	51 e0       	ldi	r21, 0x01	; 1
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	80 e1       	ldi	r24, 0x10	; 16
     a42:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_setpos(0, 5);
     a46:	65 e0       	ldi	r22, 0x05	; 5
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("By Paradox Computing");
     a4e:	86 e2       	ldi	r24, 0x26	; 38
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a56:	2f e3       	ldi	r18, 0x3F	; 63
     a58:	82 e4       	ldi	r24, 0x42	; 66
     a5a:	9f e0       	ldi	r25, 0x0F	; 15
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	80 40       	sbci	r24, 0x00	; 0
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <PlaySplashScreen+0x34>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <PlaySplashScreen+0x3e>
     a66:	00 00       	nop
     a68:	08 95       	ret

00000a6a <SaveStorage>:
		*hiscore = 0.0f;
		SaveStorage(*hiscore);
	}
}
void SaveStorage(float hiscore)
{
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	00 d0       	rcall	.+0      	; 0xa70 <SaveStorage+0x6>
     a70:	00 d0       	rcall	.+0      	; 0xa72 <SaveStorage+0x8>
     a72:	cd b7       	in	r28, 0x3d	; 61
     a74:	de b7       	in	r29, 0x3e	; 62
     a76:	69 83       	std	Y+1, r22	; 0x01
     a78:	7a 83       	std	Y+2, r23	; 0x02
     a7a:	8b 83       	std	Y+3, r24	; 0x03
     a7c:	9c 83       	std	Y+4, r25	; 0x04
	eeprom_write_block((float *)EEPROM_MEM_ADDR, &hiscore, 4);
     a7e:	44 e0       	ldi	r20, 0x04	; 4
     a80:	50 e0       	ldi	r21, 0x00	; 0
     a82:	be 01       	movw	r22, r28
     a84:	6f 5f       	subi	r22, 0xFF	; 255
     a86:	7f 4f       	sbci	r23, 0xFF	; 255
     a88:	8c e0       	ldi	r24, 0x0C	; 12
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <eeprom_write_block>
}
     a90:	0f 90       	pop	r0
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <LoadStorage>:
	
	DisplayProgress(0x00);
}

void LoadStorage(float *hiscore)
{
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	ec 01       	movw	r28, r24
	eeprom_read_block(hiscore, (float *)EEPROM_MEM_ADDR, 4);
     aa4:	44 e0       	ldi	r20, 0x04	; 4
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	6c e0       	ldi	r22, 0x0C	; 12
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	0e 94 50 14 	call	0x28a0	; 0x28a0 <eeprom_read_block>
	if(isnan(*hiscore))
     ab0:	68 81       	ld	r22, Y
     ab2:	79 81       	ldd	r23, Y+1	; 0x01
     ab4:	8a 81       	ldd	r24, Y+2	; 0x02
     ab6:	9b 81       	ldd	r25, Y+3	; 0x03
     ab8:	9b 01       	movw	r18, r22
     aba:	ac 01       	movw	r20, r24
     abc:	0e 94 08 10 	call	0x2010	; 0x2010 <__unordsf2>
     ac0:	88 23       	and	r24, r24
     ac2:	49 f0       	breq	.+18     	; 0xad6 <LoadStorage+0x38>
	{
		*hiscore = 0.0f;
     ac4:	18 82       	st	Y, r1
     ac6:	19 82       	std	Y+1, r1	; 0x01
     ac8:	1a 82       	std	Y+2, r1	; 0x02
     aca:	1b 82       	std	Y+3, r1	; 0x03
		SaveStorage(*hiscore);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	70 e0       	ldi	r23, 0x00	; 0
     ad0:	cb 01       	movw	r24, r22
     ad2:	0e 94 35 05 	call	0xa6a	; 0xa6a <SaveStorage>
	}
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <TransmitReading>:
	return bac;
}


void TransmitReading(float *reading, bool isHi)
{
     adc:	0f 93       	push	r16
     ade:	1f 93       	push	r17
     ae0:	cf 93       	push	r28
     ae2:	df 93       	push	r29
     ae4:	00 d0       	rcall	.+0      	; 0xae6 <TransmitReading+0xa>
     ae6:	1f 92       	push	r1
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	8c 01       	movw	r16, r24
	char initcode[1] = { 0xF0 };
	if(isHi)
     aee:	61 11       	cpse	r22, r1
     af0:	03 c0       	rjmp	.+6      	; 0xaf8 <TransmitReading+0x1c>
}


void TransmitReading(float *reading, bool isHi)
{
	char initcode[1] = { 0xF0 };
     af2:	80 ef       	ldi	r24, 0xF0	; 240
     af4:	89 83       	std	Y+1, r24	; 0x01
     af6:	02 c0       	rjmp	.+4      	; 0xafc <TransmitReading+0x20>
	if(isHi)
	{
		initcode[0] |= 0x01;
     af8:	81 ef       	ldi	r24, 0xF1	; 241
     afa:	89 83       	std	Y+1, r24	; 0x01
	}
	
	printf(initcode);
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	9f 93       	push	r25
     b02:	8f 93       	push	r24
     b04:	0e 94 a2 11 	call	0x2344	; 0x2344 <printf>
	
	char transmission[sizeof(reading)];
	memcpy(transmission, &reading, sizeof(reading));
     b08:	1b 83       	std	Y+3, r17	; 0x03
     b0a:	0a 83       	std	Y+2, r16	; 0x02
	printf(transmission);
     b0c:	ce 01       	movw	r24, r28
     b0e:	02 96       	adiw	r24, 0x02	; 2
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	0e 94 a2 11 	call	0x2344	; 0x2344 <printf>
	
	printf("\xFA");
     b18:	8a ef       	ldi	r24, 0xFA	; 250
     b1a:	9f ef       	ldi	r25, 0xFF	; 255
     b1c:	0e 94 b8 11 	call	0x2370	; 0x2370 <putchar>
}
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	1f 91       	pop	r17
     b34:	0f 91       	pop	r16
     b36:	08 95       	ret

00000b38 <ListenKeyPress>:

bool SampleKeyDown = false;
bool ResetKeyDown = false;
bool OverrideKeyDown = false;
bool ListenKeyPress(char *keyCode)
{
     b38:	fc 01       	movw	r30, r24
	*keyCode = 0;
     b3a:	10 82       	st	Z, r1

	if(PINC & (1 << PC0))
     b3c:	30 9b       	sbis	0x06, 0	; 6
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <ListenKeyPress+0x10>
	{
		SampleKeyDown = true;
     b40:	81 e0       	ldi	r24, 0x01	; 1
     b42:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <SampleKeyDown>
     b46:	0b c0       	rjmp	.+22     	; 0xb5e <ListenKeyPress+0x26>
	}
	else if(SampleKeyDown && (PINC & (1 << PC0)) != (1 << PC0))
     b48:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <SampleKeyDown>
     b4c:	88 23       	and	r24, r24
     b4e:	39 f0       	breq	.+14     	; 0xb5e <ListenKeyPress+0x26>
     b50:	30 99       	sbic	0x06, 0	; 6
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <ListenKeyPress+0x26>
	{
		SampleKeyDown = false;
     b54:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <SampleKeyDown>
		*keyCode |= SAMPLEKEYCODE;
     b58:	80 81       	ld	r24, Z
     b5a:	81 60       	ori	r24, 0x01	; 1
     b5c:	80 83       	st	Z, r24
	}

	if(PINC & (1 << PC1))
     b5e:	31 9b       	sbis	0x06, 1	; 6
     b60:	07 c0       	rjmp	.+14     	; 0xb70 <ListenKeyPress+0x38>
	{
		ResetKeyDown = true;
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <ResetKeyDown>
		*keyCode |= RESETKEYCODE;
     b68:	80 81       	ld	r24, Z
     b6a:	82 60       	ori	r24, 0x02	; 2
     b6c:	80 83       	st	Z, r24
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <ListenKeyPress+0x46>
	}
	else if(ResetKeyDown && (PINC & (1 << PC1)) != (1 << PC1))
     b70:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <ResetKeyDown>
     b74:	88 23       	and	r24, r24
     b76:	19 f0       	breq	.+6      	; 0xb7e <ListenKeyPress+0x46>
     b78:	31 9b       	sbis	0x06, 1	; 6
	{
		ResetKeyDown = false;
     b7a:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <ResetKeyDown>
	}

	if(PINC & (1 << PC2))
     b7e:	32 9b       	sbis	0x06, 2	; 6
     b80:	07 c0       	rjmp	.+14     	; 0xb90 <ListenKeyPress+0x58>
	{
		OverrideKeyDown = true;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <__data_end>
		*keyCode |= OVERRIDEKEYCODE;
     b88:	80 81       	ld	r24, Z
     b8a:	84 60       	ori	r24, 0x04	; 4
     b8c:	80 83       	st	Z, r24
     b8e:	07 c0       	rjmp	.+14     	; 0xb9e <ListenKeyPress+0x66>
	}
	else if(OverrideKeyDown && (PINC & (1 << PC2)) != (1 << PC2))
     b90:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <__data_end>
     b94:	88 23       	and	r24, r24
     b96:	19 f0       	breq	.+6      	; 0xb9e <ListenKeyPress+0x66>
     b98:	32 9b       	sbis	0x06, 2	; 6
	{
		OverrideKeyDown = false;
     b9a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <__data_end>
	}

	return *keyCode != 0;
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 81       	ld	r25, Z
     ba2:	91 11       	cpse	r25, r1
     ba4:	01 c0       	rjmp	.+2      	; 0xba8 <ListenKeyPress+0x70>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
}
     ba8:	08 95       	ret

00000baa <ReadADC>:
double ReadADC(void)
{
	//Select ADC channel with safety mask
	ADMUX = (1 << REFS0) | (3 & 0x0F);
     baa:	83 e4       	ldi	r24, 0x43	; 67
     bac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	//Single conversion mode
	ADCSRA |= (1 << ADSC);
     bb0:	ea e7       	ldi	r30, 0x7A	; 122
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	80 81       	ld	r24, Z
     bb6:	80 64       	ori	r24, 0x40	; 64
     bb8:	80 83       	st	Z, r24

	//Wait until ADC conversion is complete
	while(ADCSRA & (1 << ADSC));
     bba:	80 81       	ld	r24, Z
     bbc:	86 fd       	sbrc	r24, 6
     bbe:	fd cf       	rjmp	.-6      	; 0xbba <ReadADC+0x10>
	//Convert to ratio
	return (double)ADCW / 1023.0;
     bc0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     bc4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <__floatunsisf>
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 ec       	ldi	r19, 0xC0	; 192
     bd4:	4f e7       	ldi	r20, 0x7F	; 127
     bd6:	54 e4       	ldi	r21, 0x44	; 68
     bd8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3>
}
     bdc:	08 95       	ret

00000bde <ReadBAC>:
void SaveStorage(float hiscore)
{
	eeprom_write_block((float *)EEPROM_MEM_ADDR, &hiscore, 4);
}
float ReadBAC(void)
{
     bde:	8f 92       	push	r8
     be0:	9f 92       	push	r9
     be2:	af 92       	push	r10
     be4:	bf 92       	push	r11
     be6:	cf 92       	push	r12
     be8:	df 92       	push	r13
     bea:	ef 92       	push	r14
     bec:	ff 92       	push	r15
	double v = (double)ReadADC() * VREF;
     bee:	0e 94 d5 05 	call	0xbaa	; 0xbaa <ReadADC>
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	40 ea       	ldi	r20, 0xA0	; 160
     bf8:	50 e4       	ldi	r21, 0x40	; 64
     bfa:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     bfe:	6b 01       	movw	r12, r22
     c00:	7c 01       	movw	r14, r24
	
	double ppm = 150.4351049 * pow(v, 5);
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 ea       	ldi	r20, 0xA0	; 160
     c08:	50 e4       	ldi	r21, 0x40	; 64
     c0a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <pow>
     c0e:	23 e6       	ldi	r18, 0x63	; 99
     c10:	3f e6       	ldi	r19, 0x6F	; 111
     c12:	46 e1       	ldi	r20, 0x16	; 22
     c14:	53 e4       	ldi	r21, 0x43	; 67
     c16:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     c1a:	4b 01       	movw	r8, r22
     c1c:	5c 01       	movw	r10, r24
	ppm += -2244.75988 * pow(v, 4);
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e8       	ldi	r20, 0x80	; 128
     c24:	50 e4       	ldi	r21, 0x40	; 64
     c26:	c7 01       	movw	r24, r14
     c28:	b6 01       	movw	r22, r12
     c2a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <pow>
     c2e:	28 e2       	ldi	r18, 0x28	; 40
     c30:	3c e4       	ldi	r19, 0x4C	; 76
     c32:	4c e0       	ldi	r20, 0x0C	; 12
     c34:	55 ec       	ldi	r21, 0xC5	; 197
     c36:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     c3a:	a5 01       	movw	r20, r10
     c3c:	94 01       	movw	r18, r8
     c3e:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
     c42:	4b 01       	movw	r8, r22
     c44:	5c 01       	movw	r10, r24
	ppm += 13308.5139 * pow(v, 3);
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e4       	ldi	r20, 0x40	; 64
     c4c:	50 e4       	ldi	r21, 0x40	; 64
     c4e:	c7 01       	movw	r24, r14
     c50:	b6 01       	movw	r22, r12
     c52:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <pow>
     c56:	2e e0       	ldi	r18, 0x0E	; 14
     c58:	32 ef       	ldi	r19, 0xF2	; 242
     c5a:	4f e4       	ldi	r20, 0x4F	; 79
     c5c:	56 e4       	ldi	r21, 0x46	; 70
     c5e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     c62:	a5 01       	movw	r20, r10
     c64:	94 01       	movw	r18, r8
     c66:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
     c6a:	4b 01       	movw	r8, r22
     c6c:	5c 01       	movw	r10, r24
	ppm += -39136.08594 * pow(v, 2);
     c6e:	a7 01       	movw	r20, r14
     c70:	96 01       	movw	r18, r12
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     c7a:	26 e1       	ldi	r18, 0x16	; 22
     c7c:	30 ee       	ldi	r19, 0xE0	; 224
     c7e:	48 e1       	ldi	r20, 0x18	; 24
     c80:	57 ec       	ldi	r21, 0xC7	; 199
     c82:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     c86:	a5 01       	movw	r20, r10
     c88:	94 01       	movw	r18, r8
     c8a:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
     c8e:	4b 01       	movw	r8, r22
     c90:	5c 01       	movw	r10, r24
	ppm += 57082.6258 * v;
     c92:	20 ea       	ldi	r18, 0xA0	; 160
     c94:	3a ef       	ldi	r19, 0xFA	; 250
     c96:	4e e5       	ldi	r20, 0x5E	; 94
     c98:	57 e4       	ldi	r21, 0x47	; 71
     c9a:	c7 01       	movw	r24, r14
     c9c:	b6 01       	movw	r22, r12
     c9e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
     ca2:	a5 01       	movw	r20, r10
     ca4:	94 01       	movw	r18, r8
     ca6:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
	ppm += -32982.05333;
     caa:	2e e0       	ldi	r18, 0x0E	; 14
     cac:	36 ed       	ldi	r19, 0xD6	; 214
     cae:	40 e0       	ldi	r20, 0x00	; 0
     cb0:	57 e4       	ldi	r21, 0x47	; 71
     cb2:	0e 94 94 0c 	call	0x1928	; 0x1928 <__subsf3>
     cb6:	6b 01       	movw	r12, r22
     cb8:	7c 01       	movw	r14, r24
	
	float bac = 0;
	if(ppm < MINPPM)
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4c e8       	ldi	r20, 0x8C	; 140
     cc0:	52 e4       	ldi	r21, 0x42	; 66
     cc2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	9c f0       	brlt	.+38     	; 0xcf0 <ReadBAC+0x112>
	{
		bac = 0;
	}
	else if(ppm > MAXPPM)
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	4a ef       	ldi	r20, 0xFA	; 250
     cd0:	53 e4       	ldi	r21, 0x43	; 67
     cd2:	c7 01       	movw	r24, r14
     cd4:	b6 01       	movw	r22, r12
     cd6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <__gesf2>
     cda:	18 16       	cp	r1, r24
     cdc:	6c f0       	brlt	.+26     	; 0xcf8 <ReadBAC+0x11a>
	{
		bac = -1;
	}
	else
	{
		bac = (float)(ppm / 2600.0f);
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e8       	ldi	r19, 0x80	; 128
     ce2:	42 e2       	ldi	r20, 0x22	; 34
     ce4:	55 e4       	ldi	r21, 0x45	; 69
     ce6:	c7 01       	movw	r24, r14
     ce8:	b6 01       	movw	r22, r12
     cea:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3>
     cee:	08 c0       	rjmp	.+16     	; 0xd00 <ReadBAC+0x122>
	ppm += -32982.05333;
	
	float bac = 0;
	if(ppm < MINPPM)
	{
		bac = 0;
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	70 e0       	ldi	r23, 0x00	; 0
     cf4:	cb 01       	movw	r24, r22
     cf6:	04 c0       	rjmp	.+8      	; 0xd00 <ReadBAC+0x122>
	}
	else if(ppm > MAXPPM)
	{
		bac = -1;
     cf8:	60 e0       	ldi	r22, 0x00	; 0
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	9f eb       	ldi	r25, 0xBF	; 191
	{
		bac = (float)(ppm / 2600.0f);
	}
	
	return bac;
}
     d00:	ff 90       	pop	r15
     d02:	ef 90       	pop	r14
     d04:	df 90       	pop	r13
     d06:	cf 90       	pop	r12
     d08:	bf 90       	pop	r11
     d0a:	af 90       	pop	r10
     d0c:	9f 90       	pop	r9
     d0e:	8f 90       	pop	r8
     d10:	08 95       	ret

00000d12 <DisplayProgress>:
}

void DisplayProgress(char selection)
{
	selection &= 0x3E; //Remove unnecessary noise
	PORTB = (PORTB & 0xC1) | selection;
     d12:	95 b1       	in	r25, 0x05	; 5
     d14:	91 7c       	andi	r25, 0xC1	; 193
     d16:	8e 73       	andi	r24, 0x3E	; 62
     d18:	89 2b       	or	r24, r25
     d1a:	85 b9       	out	0x05, r24	; 5
     d1c:	08 95       	ret

00000d1e <reverse>:
}


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
     d1e:	9b 01       	movw	r18, r22
     d20:	21 50       	subi	r18, 0x01	; 1
     d22:	31 09       	sbc	r19, r1
	while (i<j)
     d24:	12 16       	cp	r1, r18
     d26:	13 06       	cpc	r1, r19
     d28:	84 f4       	brge	.+32     	; 0xd4a <reverse+0x2c>
     d2a:	fc 01       	movw	r30, r24
     d2c:	e6 0f       	add	r30, r22
     d2e:	f7 1f       	adc	r31, r23
     d30:	dc 01       	movw	r26, r24
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	90 e0       	ldi	r25, 0x00	; 0
	{
		temp = str[i];
     d36:	4c 91       	ld	r20, X
		str[i] = str[j];
     d38:	52 91       	ld	r21, -Z
     d3a:	5d 93       	st	X+, r21
		str[j] = temp;
     d3c:	40 83       	st	Z, r20
		i++; j--;
     d3e:	01 96       	adiw	r24, 0x01	; 1
     d40:	21 50       	subi	r18, 0x01	; 1
     d42:	31 09       	sbc	r19, r1


void reverse(char *str, int len)
{
	int i=0, j=len-1, temp;
	while (i<j)
     d44:	82 17       	cp	r24, r18
     d46:	93 07       	cpc	r25, r19
     d48:	b4 f3       	brlt	.-20     	; 0xd36 <reverse+0x18>
     d4a:	08 95       	ret

00000d4c <intToStr>:
		str[j] = temp;
		i++; j--;
	}
}
int intToStr(int x, char str[], int d)
{
     d4c:	cf 92       	push	r12
     d4e:	df 92       	push	r13
     d50:	ef 92       	push	r14
     d52:	ff 92       	push	r15
     d54:	0f 93       	push	r16
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	6b 01       	movw	r12, r22
     d5e:	8a 01       	movw	r16, r20
	int i = 0;
	while (x)
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	99 f0       	breq	.+38     	; 0xd8a <intToStr+0x3e>
     d64:	eb 01       	movw	r28, r22
     d66:	e0 e0       	ldi	r30, 0x00	; 0
     d68:	f0 e0       	ldi	r31, 0x00	; 0
	{
		str[i++] = (x%10) + '0';
     d6a:	0f 2e       	mov	r0, r31
     d6c:	fa e0       	ldi	r31, 0x0A	; 10
     d6e:	ef 2e       	mov	r14, r31
     d70:	f1 2c       	mov	r15, r1
     d72:	f0 2d       	mov	r31, r0
     d74:	31 96       	adiw	r30, 0x01	; 1
     d76:	b7 01       	movw	r22, r14
     d78:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
     d7c:	80 5d       	subi	r24, 0xD0	; 208
     d7e:	89 93       	st	Y+, r24
		x = x/10;
     d80:	86 2f       	mov	r24, r22
     d82:	97 2f       	mov	r25, r23
	}
}
int intToStr(int x, char str[], int d)
{
	int i = 0;
	while (x)
     d84:	00 97       	sbiw	r24, 0x00	; 0
     d86:	b1 f7       	brne	.-20     	; 0xd74 <intToStr+0x28>
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <intToStr+0x42>
		i++; j--;
	}
}
int intToStr(int x, char str[], int d)
{
	int i = 0;
     d8a:	e0 e0       	ldi	r30, 0x00	; 0
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     d8e:	e0 17       	cp	r30, r16
     d90:	f1 07       	cpc	r31, r17
     d92:	5c f4       	brge	.+22     	; 0xdaa <intToStr+0x5e>
     d94:	ec 0d       	add	r30, r12
     d96:	fd 1d       	adc	r31, r13
     d98:	96 01       	movw	r18, r12
     d9a:	20 0f       	add	r18, r16
     d9c:	31 1f       	adc	r19, r17
	str[i++] = '0';
     d9e:	80 e3       	ldi	r24, 0x30	; 48
     da0:	81 93       	st	Z+, r24
		x = x/10;
	}
	
	// If number of digits required is more, then
	// add 0s at the beginning
	while (i < d)
     da2:	e2 17       	cp	r30, r18
     da4:	f3 07       	cpc	r31, r19
     da6:	e1 f7       	brne	.-8      	; 0xda0 <intToStr+0x54>
     da8:	01 c0       	rjmp	.+2      	; 0xdac <intToStr+0x60>
     daa:	8f 01       	movw	r16, r30
	str[i++] = '0';
	
	reverse(str, i);
     dac:	b8 01       	movw	r22, r16
     dae:	c6 01       	movw	r24, r12
     db0:	0e 94 8f 06 	call	0xd1e	; 0xd1e <reverse>
	str[i] = '\0';
     db4:	e6 01       	movw	r28, r12
     db6:	c0 0f       	add	r28, r16
     db8:	d1 1f       	adc	r29, r17
     dba:	18 82       	st	Y, r1
	return i;
}
     dbc:	c8 01       	movw	r24, r16
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	08 95       	ret

00000dd0 <PlayWarmUpScreen>:
//Warming up...
//{0}s remaining
//
//Warm up overridden.
void PlayWarmUpScreen(void)
{
     dd0:	8f 92       	push	r8
     dd2:	9f 92       	push	r9
     dd4:	af 92       	push	r10
     dd6:	bf 92       	push	r11
     dd8:	cf 92       	push	r12
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	00 d0       	rcall	.+0      	; 0xde6 <PlayWarmUpScreen+0x16>
     de6:	00 d0       	rcall	.+0      	; 0xde8 <PlayWarmUpScreen+0x18>
     de8:	00 d0       	rcall	.+0      	; 0xdea <PlayWarmUpScreen+0x1a>
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
	char text[5];
	bool overridden = false;
	
	ssd1306_clear();
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
	ssd1306_string_font8x16xy(12, 0, "Warming up...");
     df4:	4b e3       	ldi	r20, 0x3B	; 59
     df6:	51 e0       	ldi	r21, 0x01	; 1
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	8c e0       	ldi	r24, 0x0C	; 12
     dfc:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_setpos(37, 3);
     e00:	63 e0       	ldi	r22, 0x03	; 3
     e02:	85 e2       	ldi	r24, 0x25	; 37
     e04:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("s Remaining.");
     e08:	89 e4       	ldi	r24, 0x49	; 73
     e0a:	91 e0       	ldi	r25, 0x01	; 1
     e0c:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
     e10:	0f 2e       	mov	r0, r31
     e12:	f0 ea       	ldi	r31, 0xA0	; 160
     e14:	cf 2e       	mov	r12, r31
     e16:	f8 e6       	ldi	r31, 0x68	; 104
     e18:	df 2e       	mov	r13, r31
     e1a:	f6 e0       	ldi	r31, 0x06	; 6
     e1c:	ef 2e       	mov	r14, r31
     e1e:	f1 2c       	mov	r15, r1
     e20:	f0 2d       	mov	r31, r0
			}
		}
		
		//Format text: "Warming up...\n{0:000}s remaining."
		//sprintf(text, "%03d", (int)((WARMUPDELAY - i) / 1000));
		intToStr((int)((WARMUPDELAY - i) / 1000), text, 3);
     e22:	0f 2e       	mov	r0, r31
     e24:	f8 ee       	ldi	r31, 0xE8	; 232
     e26:	8f 2e       	mov	r8, r31
     e28:	f3 e0       	ldi	r31, 0x03	; 3
     e2a:	9f 2e       	mov	r9, r31
     e2c:	a1 2c       	mov	r10, r1
     e2e:	b1 2c       	mov	r11, r1
     e30:	f0 2d       	mov	r31, r0
	ssd1306_string_font6x8("s Remaining.");
	
	for(long i = 0; i < WARMUPDELAY; i += 1000)
	{
		char key;
		if(ListenKeyPress(&key))
     e32:	ce 01       	movw	r24, r28
     e34:	06 96       	adiw	r24, 0x06	; 6
     e36:	0e 94 9c 05 	call	0xb38	; 0xb38 <ListenKeyPress>
     e3a:	88 23       	and	r24, r24
     e3c:	19 f0       	breq	.+6      	; 0xe44 <PlayWarmUpScreen+0x74>
		{
			if((key & OVERRIDEKEYCODE) == OVERRIDEKEYCODE)
     e3e:	8e 81       	ldd	r24, Y+6	; 0x06
     e40:	82 fd       	sbrc	r24, 2
     e42:	28 c0       	rjmp	.+80     	; 0xe94 <PlayWarmUpScreen+0xc4>
			}
		}
		
		//Format text: "Warming up...\n{0:000}s remaining."
		//sprintf(text, "%03d", (int)((WARMUPDELAY - i) / 1000));
		intToStr((int)((WARMUPDELAY - i) / 1000), text, 3);
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	a5 01       	movw	r20, r10
     e4a:	94 01       	movw	r18, r8
     e4c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <__udivmodsi4>
     e50:	da 01       	movw	r26, r20
     e52:	c9 01       	movw	r24, r18
     e54:	43 e0       	ldi	r20, 0x03	; 3
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	be 01       	movw	r22, r28
     e5a:	6f 5f       	subi	r22, 0xFF	; 255
     e5c:	7f 4f       	sbci	r23, 0xFF	; 255
     e5e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <intToStr>
		
		
		ssd1306_setpos(19, 3);
     e62:	63 e0       	ldi	r22, 0x03	; 3
     e64:	83 e1       	ldi	r24, 0x13	; 19
     e66:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8(text);
     e6a:	ce 01       	movw	r24, r28
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
     e72:	2f e3       	ldi	r18, 0x3F	; 63
     e74:	8d e0       	ldi	r24, 0x0D	; 13
     e76:	93 e0       	ldi	r25, 0x03	; 3
     e78:	21 50       	subi	r18, 0x01	; 1
     e7a:	80 40       	sbci	r24, 0x00	; 0
     e7c:	90 40       	sbci	r25, 0x00	; 0
     e7e:	e1 f7       	brne	.-8      	; 0xe78 <PlayWarmUpScreen+0xa8>
     e80:	00 c0       	rjmp	.+0      	; 0xe82 <PlayWarmUpScreen+0xb2>
     e82:	00 00       	nop
     e84:	28 ee       	ldi	r18, 0xE8	; 232
     e86:	c2 1a       	sub	r12, r18
     e88:	23 e0       	ldi	r18, 0x03	; 3
     e8a:	d2 0a       	sbc	r13, r18
     e8c:	e1 08       	sbc	r14, r1
     e8e:	f1 08       	sbc	r15, r1
	ssd1306_clear();
	ssd1306_string_font8x16xy(12, 0, "Warming up...");
	ssd1306_setpos(37, 3);
	ssd1306_string_font6x8("s Remaining.");
	
	for(long i = 0; i < WARMUPDELAY; i += 1000)
     e90:	81 f6       	brne	.-96     	; 0xe32 <PlayWarmUpScreen+0x62>
     e92:	2e c0       	rjmp	.+92     	; 0xef0 <PlayWarmUpScreen+0x120>
			}
		}
		
		//Format text: "Warming up...\n{0:000}s remaining."
		//sprintf(text, "%03d", (int)((WARMUPDELAY - i) / 1000));
		intToStr((int)((WARMUPDELAY - i) / 1000), text, 3);
     e94:	43 e0       	ldi	r20, 0x03	; 3
     e96:	50 e0       	ldi	r21, 0x00	; 0
     e98:	be 01       	movw	r22, r28
     e9a:	6f 5f       	subi	r22, 0xFF	; 255
     e9c:	7f 4f       	sbci	r23, 0xFF	; 255
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	0e 94 a6 06 	call	0xd4c	; 0xd4c <intToStr>
		
		
		ssd1306_setpos(19, 3);
     ea6:	63 e0       	ldi	r22, 0x03	; 3
     ea8:	83 e1       	ldi	r24, 0x13	; 19
     eaa:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8(text);
     eae:	ce 01       	movw	r24, r28
     eb0:	01 96       	adiw	r24, 0x01	; 1
     eb2:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
     eb6:	8f e3       	ldi	r24, 0x3F	; 63
     eb8:	9d e0       	ldi	r25, 0x0D	; 13
     eba:	23 e0       	ldi	r18, 0x03	; 3
     ebc:	81 50       	subi	r24, 0x01	; 1
     ebe:	90 40       	sbci	r25, 0x00	; 0
     ec0:	20 40       	sbci	r18, 0x00	; 0
     ec2:	e1 f7       	brne	.-8      	; 0xebc <PlayWarmUpScreen+0xec>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <PlayWarmUpScreen+0xf6>
     ec6:	00 00       	nop
		_delay_ms(1000);
	}
	
	if(overridden)
	{
		ssd1306_clear();
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
		ssd1306_setpos(0, 0);
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8("Warmup overridden.");
     ed6:	86 e5       	ldi	r24, 0x56	; 86
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
     ede:	8f e7       	ldi	r24, 0x7F	; 127
     ee0:	9a e1       	ldi	r25, 0x1A	; 26
     ee2:	26 e0       	ldi	r18, 0x06	; 6
     ee4:	81 50       	subi	r24, 0x01	; 1
     ee6:	90 40       	sbci	r25, 0x00	; 0
     ee8:	20 40       	sbci	r18, 0x00	; 0
     eea:	e1 f7       	brne	.-8      	; 0xee4 <PlayWarmUpScreen+0x114>
     eec:	00 c0       	rjmp	.+0      	; 0xeee <PlayWarmUpScreen+0x11e>
     eee:	00 00       	nop
		_delay_ms(OVERRIDDENISPLAYDELAY);
	}
}
     ef0:	26 96       	adiw	r28, 0x06	; 6
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	df 91       	pop	r29
     efe:	cf 91       	pop	r28
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	bf 90       	pop	r11
     f0a:	af 90       	pop	r10
     f0c:	9f 90       	pop	r9
     f0e:	8f 90       	pop	r8
     f10:	08 95       	ret

00000f12 <PlayResetScreen>:
//Hold down to confirm.
//{0}s
//
//Memory reset.
bool PlayResetScreen(void)
{
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ff 92       	push	r15
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	00 d0       	rcall	.+0      	; 0xf22 <PlayResetScreen+0x10>
     f22:	00 d0       	rcall	.+0      	; 0xf24 <PlayResetScreen+0x12>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <PlayResetScreen+0x14>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	08 e8       	ldi	r16, 0x88	; 136
     f2c:	13 e1       	ldi	r17, 0x13	; 19
	char remaining[5];
	bool reset = false;
	for(int i = 0; i < RESETDELAY; i += 1000)
	{
		//sprintf(remaining, "%02ds", (int)((RESETDELAY - i) / 1000));
		intToStr((int)((RESETDELAY - i) / 1000), remaining, 2);
     f2e:	0f 2e       	mov	r0, r31
     f30:	f8 ee       	ldi	r31, 0xE8	; 232
     f32:	cf 2e       	mov	r12, r31
     f34:	f3 e0       	ldi	r31, 0x03	; 3
     f36:	df 2e       	mov	r13, r31
     f38:	f0 2d       	mov	r31, r0
     f3a:	c8 01       	movw	r24, r16
     f3c:	b6 01       	movw	r22, r12
     f3e:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
     f42:	cb 01       	movw	r24, r22
     f44:	42 e0       	ldi	r20, 0x02	; 2
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <intToStr>
		
		ssd1306_clear();
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
		ssd1306_setpos(0, 0);
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8("Reset. Are you sure?");
     f60:	89 e6       	ldi	r24, 0x69	; 105
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
		ssd1306_setpos(0, 1);
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8("Hold down to confirm.");
     f70:	8e e7       	ldi	r24, 0x7E	; 126
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
		ssd1306_setpos(0, 2);
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8(remaining);
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
		
		char key;
		if(ListenKeyPress(&key))
     f88:	ce 01       	movw	r24, r28
     f8a:	06 96       	adiw	r24, 0x06	; 6
     f8c:	0e 94 9c 05 	call	0xb38	; 0xb38 <ListenKeyPress>
     f90:	f8 2e       	mov	r15, r24
     f92:	88 23       	and	r24, r24
     f94:	19 f0       	breq	.+6      	; 0xf9c <PlayResetScreen+0x8a>
		{
			if((key & RESETKEYCODE) == RESETKEYCODE)
     f96:	8e 81       	ldd	r24, Y+6	; 0x06
     f98:	81 fd       	sbrc	r24, 1
     f9a:	0e c0       	rjmp	.+28     	; 0xfb8 <PlayResetScreen+0xa6>
     f9c:	2f e3       	ldi	r18, 0x3F	; 63
     f9e:	8d e0       	ldi	r24, 0x0D	; 13
     fa0:	93 e0       	ldi	r25, 0x03	; 3
     fa2:	21 50       	subi	r18, 0x01	; 1
     fa4:	80 40       	sbci	r24, 0x00	; 0
     fa6:	90 40       	sbci	r25, 0x00	; 0
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <PlayResetScreen+0x90>
     faa:	00 c0       	rjmp	.+0      	; 0xfac <PlayResetScreen+0x9a>
     fac:	00 00       	nop
     fae:	08 5e       	subi	r16, 0xE8	; 232
     fb0:	13 40       	sbci	r17, 0x03	; 3
//Memory reset.
bool PlayResetScreen(void)
{
	char remaining[5];
	bool reset = false;
	for(int i = 0; i < RESETDELAY; i += 1000)
     fb2:	19 f6       	brne	.-122    	; 0xf3a <PlayResetScreen+0x28>
		ssd1306_setpos(0, 0);
		ssd1306_string_font6x8("Memory reset.");
		_delay_ms(RESETDISPLAYDELAY);
		return true;
	}
	return false;
     fb4:	f1 2c       	mov	r15, r1
     fb6:	22 c0       	rjmp	.+68     	; 0xffc <PlayResetScreen+0xea>
     fb8:	2f e3       	ldi	r18, 0x3F	; 63
     fba:	8d e0       	ldi	r24, 0x0D	; 13
     fbc:	93 e0       	ldi	r25, 0x03	; 3
     fbe:	21 50       	subi	r18, 0x01	; 1
     fc0:	80 40       	sbci	r24, 0x00	; 0
     fc2:	90 40       	sbci	r25, 0x00	; 0
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <PlayResetScreen+0xac>
     fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <PlayResetScreen+0xb6>
     fc8:	00 00       	nop
	}
	
	if(reset)
	{
		//Clear memory
		SaveStorage(0);
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	cb 01       	movw	r24, r22
     fd0:	0e 94 35 05 	call	0xa6a	; 0xa6a <SaveStorage>
		
		ssd1306_clear();
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
		ssd1306_setpos(0, 0);
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8("Memory reset.");
     fe2:	84 e9       	ldi	r24, 0x94	; 148
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
     fea:	2f e7       	ldi	r18, 0x7F	; 127
     fec:	8a e1       	ldi	r24, 0x1A	; 26
     fee:	96 e0       	ldi	r25, 0x06	; 6
     ff0:	21 50       	subi	r18, 0x01	; 1
     ff2:	80 40       	sbci	r24, 0x00	; 0
     ff4:	90 40       	sbci	r25, 0x00	; 0
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <PlayResetScreen+0xde>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <PlayResetScreen+0xe8>
     ffa:	00 00       	nop
		_delay_ms(RESETDISPLAYDELAY);
		return true;
	}
	return false;
}
     ffc:	8f 2d       	mov	r24, r15
     ffe:	26 96       	adiw	r28, 0x06	; 6
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	08 95       	ret

0000101a <ftoa>:
	reverse(str, i);
	str[i] = '\0';
	return i;
}
void ftoa(float n, char *res, int afterpoint)
{
    101a:	2f 92       	push	r2
    101c:	3f 92       	push	r3
    101e:	4f 92       	push	r4
    1020:	5f 92       	push	r5
    1022:	6f 92       	push	r6
    1024:	7f 92       	push	r7
    1026:	8f 92       	push	r8
    1028:	9f 92       	push	r9
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	4b 01       	movw	r8, r22
    1040:	5c 01       	movw	r10, r24
    1042:	1a 01       	movw	r2, r20
    1044:	89 01       	movw	r16, r18
	// Extract integer part
	int ipart = (int)n;
    1046:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fixsfsi>
    104a:	6b 01       	movw	r12, r22
    104c:	7c 01       	movw	r14, r24
	
	// Extract floating part
	float fpart = n - (float)ipart;
	
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	b1 01       	movw	r22, r2
    1054:	c6 01       	movw	r24, r12
    1056:	0e 94 a6 06 	call	0xd4c	; 0xd4c <intToStr>
    105a:	ec 01       	movw	r28, r24
	
	if(i == 0)
    105c:	89 2b       	or	r24, r25
    105e:	29 f4       	brne	.+10     	; 0x106a <ftoa+0x50>
	{
		i++;
		res[0] = '0';
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	f1 01       	movw	r30, r2
    1064:	80 83       	st	Z, r24
	// convert integer part to string
	int i = intToStr(ipart, res, 0);
	
	if(i == 0)
	{
		i++;
    1066:	c1 e0       	ldi	r28, 0x01	; 1
    1068:	d0 e0       	ldi	r29, 0x00	; 0
		res[0] = '0';
	}
	// check for display option after point
	if (afterpoint != 0)
    106a:	01 15       	cp	r16, r1
    106c:	11 05       	cpc	r17, r1
    106e:	89 f1       	breq	.+98     	; 0x10d2 <ftoa+0xb8>
	{
		res[i] = '.';  // add dot
    1070:	f1 01       	movw	r30, r2
    1072:	ec 0f       	add	r30, r28
    1074:	fd 1f       	adc	r31, r29
    1076:	8e e2       	ldi	r24, 0x2E	; 46
    1078:	80 83       	st	Z, r24
		
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
    107a:	b8 01       	movw	r22, r16
    107c:	01 2e       	mov	r0, r17
    107e:	00 0c       	add	r0, r0
    1080:	88 0b       	sbc	r24, r24
    1082:	99 0b       	sbc	r25, r25
    1084:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__floatsisf>
    1088:	9b 01       	movw	r18, r22
    108a:	ac 01       	movw	r20, r24
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	70 e0       	ldi	r23, 0x00	; 0
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	91 e4       	ldi	r25, 0x41	; 65
    1094:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <pow>
    1098:	2b 01       	movw	r4, r22
    109a:	3c 01       	movw	r6, r24
{
	// Extract integer part
	int ipart = (int)n;
	
	// Extract floating part
	float fpart = n - (float)ipart;
    109c:	b6 01       	movw	r22, r12
    109e:	dd 0c       	add	r13, r13
    10a0:	88 0b       	sbc	r24, r24
    10a2:	99 0b       	sbc	r25, r25
    10a4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__floatsisf>
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	c5 01       	movw	r24, r10
    10ae:	b4 01       	movw	r22, r8
    10b0:	0e 94 94 0c 	call	0x1928	; 0x1928 <__subsf3>
		// Get the value of fraction part upto given no.
		// of points after dot. The third parameter is needed
		// to handle cases like 233.007
		fpart = fpart * pow(10, afterpoint);
		
		intToStr((int)fpart, res + i + 1, afterpoint);
    10b4:	21 96       	adiw	r28, 0x01	; 1
    10b6:	2c 0e       	add	r2, r28
    10b8:	3d 1e       	adc	r3, r29
    10ba:	a3 01       	movw	r20, r6
    10bc:	92 01       	movw	r18, r4
    10be:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    10c2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fixsfsi>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	a8 01       	movw	r20, r16
    10cc:	b1 01       	movw	r22, r2
    10ce:	0e 94 a6 06 	call	0xd4c	; 0xd4c <intToStr>
	}
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	1f 91       	pop	r17
    10d8:	0f 91       	pop	r16
    10da:	ff 90       	pop	r15
    10dc:	ef 90       	pop	r14
    10de:	df 90       	pop	r13
    10e0:	cf 90       	pop	r12
    10e2:	bf 90       	pop	r11
    10e4:	af 90       	pop	r10
    10e6:	9f 90       	pop	r9
    10e8:	8f 90       	pop	r8
    10ea:	7f 90       	pop	r7
    10ec:	6f 90       	pop	r6
    10ee:	5f 90       	pop	r5
    10f0:	4f 90       	pop	r4
    10f2:	3f 90       	pop	r3
    10f4:	2f 90       	pop	r2
    10f6:	08 95       	ret

000010f8 <PlaySampling>:
//>> SAMPLING
//Sampling...
//  {0:0.000}
//{1}s remaining.
float PlaySampling(void)
{
    10f8:	2f 92       	push	r2
    10fa:	3f 92       	push	r3
    10fc:	4f 92       	push	r4
    10fe:	5f 92       	push	r5
    1100:	6f 92       	push	r6
    1102:	7f 92       	push	r7
    1104:	8f 92       	push	r8
    1106:	9f 92       	push	r9
    1108:	af 92       	push	r10
    110a:	bf 92       	push	r11
    110c:	cf 92       	push	r12
    110e:	df 92       	push	r13
    1110:	ef 92       	push	r14
    1112:	ff 92       	push	r15
    1114:	0f 93       	push	r16
    1116:	1f 93       	push	r17
    1118:	cf 93       	push	r28
    111a:	df 93       	push	r29
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	68 97       	sbiw	r28, 0x18	; 24
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
	float sumWeightedBAC = 0;
	float sumWeights = 0;
	
	ssd1306_clear();
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
	ssd1306_string_font8x16xy(20, 0, "Sampling...");
    1132:	42 ea       	ldi	r20, 0xA2	; 162
    1134:	51 e0       	ldi	r21, 0x01	; 1
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	84 e1       	ldi	r24, 0x14	; 20
    113a:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_setpos(72, 3);
    113e:	63 e0       	ldi	r22, 0x03	; 3
    1140:	88 e4       	ldi	r24, 0x48	; 72
    1142:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("bac");
    1146:	8e ea       	ldi	r24, 0xAE	; 174
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
	ssd1306_setpos(34, 5);
    114e:	65 e0       	ldi	r22, 0x05	; 5
    1150:	82 e2       	ldi	r24, 0x22	; 34
    1152:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("s remaining.");
    1156:	82 eb       	ldi	r24, 0xB2	; 178
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
	
	
	for(int i = 0; i < SAMPLEDELAY; i += SAMPLERESDELAY)
    115e:	21 2c       	mov	r2, r1
    1160:	31 2c       	mov	r3, r1
//  {0:0.000}
//{1}s remaining.
float PlaySampling(void)
{
	float sumWeightedBAC = 0;
	float sumWeights = 0;
    1162:	1d 8a       	std	Y+21, r1	; 0x15
    1164:	1e 8a       	std	Y+22, r1	; 0x16
    1166:	1f 8a       	std	Y+23, r1	; 0x17
    1168:	18 8e       	std	Y+24, r1	; 0x18
//Sampling...
//  {0:0.000}
//{1}s remaining.
float PlaySampling(void)
{
	float sumWeightedBAC = 0;
    116a:	19 8a       	std	Y+17, r1	; 0x11
    116c:	1a 8a       	std	Y+18, r1	; 0x12
    116e:	1b 8a       	std	Y+19, r1	; 0x13
    1170:	1c 8a       	std	Y+20, r1	; 0x14
		char currSampleText[7];
		//sprintf(currSampleText, "%.3f", tempresult);
		ftoa(tempresult, currSampleText, 3);
		char remaining[5];
		//sprintf(remaining, "%02d", (SAMPLEDELAY - i) / 1000);
		intToStr((SAMPLEDELAY - i) / 1000, remaining, 2);
    1172:	0f 2e       	mov	r0, r31
    1174:	f0 e1       	ldi	r31, 0x10	; 16
    1176:	af 2e       	mov	r10, r31
    1178:	f7 e2       	ldi	r31, 0x27	; 39
    117a:	bf 2e       	mov	r11, r31
    117c:	f0 2d       	mov	r31, r0
    117e:	0f 2e       	mov	r0, r31
    1180:	f8 ee       	ldi	r31, 0xE8	; 232
    1182:	8f 2e       	mov	r8, r31
    1184:	f3 e0       	ldi	r31, 0x03	; 3
    1186:	9f 2e       	mov	r9, r31
    1188:	f0 2d       	mov	r31, r0
		
		int leds = (int)floor(((float)i / (float)SAMPLEDELAY) * 5.0) + 1;
		char disp = 0x00;
		for(int j = 0; j <= leds; j++)
		{
			disp |= (1 << j);
    118a:	01 e0       	ldi	r16, 0x01	; 1
    118c:	10 e0       	ldi	r17, 0x00	; 0
	ssd1306_string_font6x8("s remaining.");
	
	
	for(int i = 0; i < SAMPLEDELAY; i += SAMPLERESDELAY)
	{
		float t = (float)i / 1000.0f;
    118e:	b1 01       	movw	r22, r2
    1190:	03 2c       	mov	r0, r3
    1192:	00 0c       	add	r0, r0
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__floatsisf>
    119c:	2b 01       	movw	r4, r22
    119e:	3c 01       	movw	r6, r24
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	4a e7       	ldi	r20, 0x7A	; 122
    11a6:	54 e4       	ldi	r21, 0x44	; 68
    11a8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3>
    11ac:	6d 87       	std	Y+13, r22	; 0x0d
    11ae:	7e 87       	std	Y+14, r23	; 0x0e
    11b0:	8f 87       	std	Y+15, r24	; 0x0f
    11b2:	98 8b       	std	Y+16, r25	; 0x10
		float bac = ReadBAC();
    11b4:	0e 94 ef 05 	call	0xbde	; 0xbde <ReadBAC>
    11b8:	6b 01       	movw	r12, r22
    11ba:	7c 01       	movw	r14, r24
		if(bac < 0)
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	a9 01       	movw	r20, r18
    11c2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__cmpsf2>
    11c6:	88 23       	and	r24, r24
    11c8:	1c f4       	brge	.+6      	; 0x11d0 <PlaySampling+0xd8>
		{
			bac = 0;
    11ca:	c1 2c       	mov	r12, r1
    11cc:	d1 2c       	mov	r13, r1
    11ce:	76 01       	movw	r14, r12
		}
		float coef = 1.0f / M_PI * atan(t - SAMPLEINFLECTIONPOINT) + 1.0f / 2.0f;
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 ea       	ldi	r20, 0xA0	; 160
    11d6:	50 e4       	ldi	r21, 0x40	; 64
    11d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    11da:	7e 85       	ldd	r23, Y+14	; 0x0e
    11dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    11de:	98 89       	ldd	r25, Y+16	; 0x10
    11e0:	0e 94 94 0c 	call	0x1928	; 0x1928 <__subsf3>
    11e4:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <atan>
    11e8:	23 e8       	ldi	r18, 0x83	; 131
    11ea:	39 ef       	ldi	r19, 0xF9	; 249
    11ec:	42 ea       	ldi	r20, 0xA2	; 162
    11ee:	5e e3       	ldi	r21, 0x3E	; 62
    11f0:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	5f e3       	ldi	r21, 0x3F	; 63
    11fc:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
    1200:	6d 87       	std	Y+13, r22	; 0x0d
    1202:	7e 87       	std	Y+14, r23	; 0x0e
    1204:	8f 87       	std	Y+15, r24	; 0x0f
    1206:	98 8b       	std	Y+16, r25	; 0x10
		
		bac *= coef;
		sumWeightedBAC += bac;
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	c7 01       	movw	r24, r14
    120e:	b6 01       	movw	r22, r12
    1210:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	69 89       	ldd	r22, Y+17	; 0x11
    121a:	7a 89       	ldd	r23, Y+18	; 0x12
    121c:	8b 89       	ldd	r24, Y+19	; 0x13
    121e:	9c 89       	ldd	r25, Y+20	; 0x14
    1220:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
    1224:	69 8b       	std	Y+17, r22	; 0x11
    1226:	7a 8b       	std	Y+18, r23	; 0x12
    1228:	8b 8b       	std	Y+19, r24	; 0x13
    122a:	9c 8b       	std	Y+20, r25	; 0x14
		sumWeights += coef;
    122c:	2d 85       	ldd	r18, Y+13	; 0x0d
    122e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1230:	4f 85       	ldd	r20, Y+15	; 0x0f
    1232:	58 89       	ldd	r21, Y+16	; 0x10
    1234:	6d 89       	ldd	r22, Y+21	; 0x15
    1236:	7e 89       	ldd	r23, Y+22	; 0x16
    1238:	8f 89       	ldd	r24, Y+23	; 0x17
    123a:	98 8d       	ldd	r25, Y+24	; 0x18
    123c:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
    1240:	6d 8b       	std	Y+21, r22	; 0x15
    1242:	7e 8b       	std	Y+22, r23	; 0x16
    1244:	8f 8b       	std	Y+23, r24	; 0x17
    1246:	98 8f       	std	Y+24, r25	; 0x18
		
		float tempresult = sumWeightedBAC / sumWeights;
    1248:	9b 01       	movw	r18, r22
    124a:	ac 01       	movw	r20, r24
    124c:	69 89       	ldd	r22, Y+17	; 0x11
    124e:	7a 89       	ldd	r23, Y+18	; 0x12
    1250:	8b 89       	ldd	r24, Y+19	; 0x13
    1252:	9c 89       	ldd	r25, Y+20	; 0x14
    1254:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3>
    1258:	6b 01       	movw	r12, r22
    125a:	7c 01       	movw	r14, r24
		
		
		char currSampleText[7];
		//sprintf(currSampleText, "%.3f", tempresult);
		ftoa(tempresult, currSampleText, 3);
    125c:	23 e0       	ldi	r18, 0x03	; 3
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	ae 01       	movw	r20, r28
    1262:	4f 5f       	subi	r20, 0xFF	; 255
    1264:	5f 4f       	sbci	r21, 0xFF	; 255
    1266:	0e 94 0d 08 	call	0x101a	; 0x101a <ftoa>
		char remaining[5];
		//sprintf(remaining, "%02d", (SAMPLEDELAY - i) / 1000);
		intToStr((SAMPLEDELAY - i) / 1000, remaining, 2);
    126a:	c5 01       	movw	r24, r10
    126c:	82 19       	sub	r24, r2
    126e:	93 09       	sbc	r25, r3
    1270:	b4 01       	movw	r22, r8
    1272:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__divmodhi4>
    1276:	cb 01       	movw	r24, r22
    1278:	42 e0       	ldi	r20, 0x02	; 2
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	be 01       	movw	r22, r28
    127e:	68 5f       	subi	r22, 0xF8	; 248
    1280:	7f 4f       	sbci	r23, 0xFF	; 255
    1282:	0e 94 a6 06 	call	0xd4c	; 0xd4c <intToStr>
		
		
		int leds = (int)floor(((float)i / (float)SAMPLEDELAY) * 5.0) + 1;
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e4       	ldi	r19, 0x40	; 64
    128a:	4c e1       	ldi	r20, 0x1C	; 28
    128c:	56 e4       	ldi	r21, 0x46	; 70
    128e:	c3 01       	movw	r24, r6
    1290:	b2 01       	movw	r22, r4
    1292:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3>
    1296:	20 e0       	ldi	r18, 0x00	; 0
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	40 ea       	ldi	r20, 0xA0	; 160
    129c:	50 e4       	ldi	r21, 0x40	; 64
    129e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    12a2:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <floor>
    12a6:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fixsfsi>
    12aa:	6f 5f       	subi	r22, 0xFF	; 255
    12ac:	7f 4f       	sbci	r23, 0xFF	; 255
		char disp = 0x00;
		for(int j = 0; j <= leds; j++)
    12ae:	8a f0       	brmi	.+34     	; 0x12d2 <PlaySampling+0x1da>
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
		{
			disp |= (1 << j);
    12b6:	a8 01       	movw	r20, r16
    12b8:	02 2e       	mov	r0, r18
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <PlaySampling+0x1c8>
    12bc:	44 0f       	add	r20, r20
    12be:	55 1f       	adc	r21, r21
    12c0:	0a 94       	dec	r0
    12c2:	e2 f7       	brpl	.-8      	; 0x12bc <PlaySampling+0x1c4>
    12c4:	84 2b       	or	r24, r20
		intToStr((SAMPLEDELAY - i) / 1000, remaining, 2);
		
		
		int leds = (int)floor(((float)i / (float)SAMPLEDELAY) * 5.0) + 1;
		char disp = 0x00;
		for(int j = 0; j <= leds; j++)
    12c6:	2f 5f       	subi	r18, 0xFF	; 255
    12c8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ca:	62 17       	cp	r22, r18
    12cc:	73 07       	cpc	r23, r19
    12ce:	9c f7       	brge	.-26     	; 0x12b6 <PlaySampling+0x1be>
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <PlaySampling+0x1dc>
		//sprintf(remaining, "%02d", (SAMPLEDELAY - i) / 1000);
		intToStr((SAMPLEDELAY - i) / 1000, remaining, 2);
		
		
		int leds = (int)floor(((float)i / (float)SAMPLEDELAY) * 5.0) + 1;
		char disp = 0x00;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
		for(int j = 0; j <= leds; j++)
		{
			disp |= (1 << j);
		}
		DisplayProgress(disp);
    12d4:	0e 94 89 06 	call	0xd12	; 0xd12 <DisplayProgress>
		
		
		ssd1306_string_font8x16xy(32, 2, currSampleText);
    12d8:	ae 01       	movw	r20, r28
    12da:	4f 5f       	subi	r20, 0xFF	; 255
    12dc:	5f 4f       	sbci	r21, 0xFF	; 255
    12de:	62 e0       	ldi	r22, 0x02	; 2
    12e0:	80 e2       	ldi	r24, 0x20	; 32
    12e2:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
		ssd1306_setpos(22, 5);
    12e6:	65 e0       	ldi	r22, 0x05	; 5
    12e8:	86 e1       	ldi	r24, 0x16	; 22
    12ea:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8(remaining);
    12ee:	ce 01       	movw	r24, r28
    12f0:	08 96       	adiw	r24, 0x08	; 8
    12f2:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
    12f6:	83 e2       	ldi	r24, 0x23	; 35
    12f8:	94 ef       	ldi	r25, 0xF4	; 244
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <PlaySampling+0x202>
    12fe:	00 c0       	rjmp	.+0      	; 0x1300 <PlaySampling+0x208>
    1300:	00 00       	nop
	ssd1306_string_font6x8("bac");
	ssd1306_setpos(34, 5);
	ssd1306_string_font6x8("s remaining.");
	
	
	for(int i = 0; i < SAMPLEDELAY; i += SAMPLERESDELAY)
    1302:	9a ef       	ldi	r25, 0xFA	; 250
    1304:	29 0e       	add	r2, r25
    1306:	31 1c       	adc	r3, r1
    1308:	80 e1       	ldi	r24, 0x10	; 16
    130a:	28 16       	cp	r2, r24
    130c:	87 e2       	ldi	r24, 0x27	; 39
    130e:	38 06       	cpc	r3, r24
    1310:	09 f0       	breq	.+2      	; 0x1314 <PlaySampling+0x21c>
    1312:	3d cf       	rjmp	.-390    	; 0x118e <PlaySampling+0x96>
		
		
		_delay_ms(SAMPLERESDELAY);
	}
	
	DisplayProgress(0x00);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	0e 94 89 06 	call	0xd12	; 0xd12 <DisplayProgress>
	
	float result = sumWeightedBAC / sumWeights;
	
	return result;
}
    131a:	c7 01       	movw	r24, r14
    131c:	b6 01       	movw	r22, r12
    131e:	68 96       	adiw	r28, 0x18	; 24
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	de bf       	out	0x3e, r29	; 62
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	cd bf       	out	0x3d, r28	; 61
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	7f 90       	pop	r7
    1344:	6f 90       	pop	r6
    1346:	5f 90       	pop	r5
    1348:	4f 90       	pop	r4
    134a:	3f 90       	pop	r3
    134c:	2f 90       	pop	r2
    134e:	08 95       	ret

00001350 <PlayScore>:
//////////////////////////////////////////////////////////////////////////
//>> SCORE
//Sample:
//  {0:0.000}bac
void PlayScore(float score)
{
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	27 97       	sbiw	r28, 0x07	; 7
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
	char text[7];
	//sprintf(text, "%.3f", score);
	ftoa(score, text, 3);
    1364:	23 e0       	ldi	r18, 0x03	; 3
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	ae 01       	movw	r20, r28
    136a:	4f 5f       	subi	r20, 0xFF	; 255
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	0e 94 0d 08 	call	0x101a	; 0x101a <ftoa>
	
	ssd1306_clear();
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
	ssd1306_string_font8x16xy(36, 0, "Sample:");
    1378:	4f eb       	ldi	r20, 0xBF	; 191
    137a:	51 e0       	ldi	r21, 0x01	; 1
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	84 e2       	ldi	r24, 0x24	; 36
    1380:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_string_font8x16xy(35, 2, text);
    1384:	ae 01       	movw	r20, r28
    1386:	4f 5f       	subi	r20, 0xFF	; 255
    1388:	5f 4f       	sbci	r21, 0xFF	; 255
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	83 e2       	ldi	r24, 0x23	; 35
    138e:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_setpos(75, 3);
    1392:	63 e0       	ldi	r22, 0x03	; 3
    1394:	8b e4       	ldi	r24, 0x4B	; 75
    1396:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("bac");
    139a:	8e ea       	ldi	r24, 0xAE	; 174
    139c:	91 e0       	ldi	r25, 0x01	; 1
    139e:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
    13a2:	2f eb       	ldi	r18, 0xBF	; 191
    13a4:	8c e5       	ldi	r24, 0x5C	; 92
    13a6:	95 e1       	ldi	r25, 0x15	; 21
    13a8:	21 50       	subi	r18, 0x01	; 1
    13aa:	80 40       	sbci	r24, 0x00	; 0
    13ac:	90 40       	sbci	r25, 0x00	; 0
    13ae:	e1 f7       	brne	.-8      	; 0x13a8 <PlayScore+0x58>
    13b0:	00 c0       	rjmp	.+0      	; 0x13b2 <PlayScore+0x62>
    13b2:	00 00       	nop
	
	_delay_ms(SCOREDELAY);
}
    13b4:	27 96       	adiw	r28, 0x07	; 7
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	08 95       	ret

000013c6 <PlayHighScore>:
//>> HIGH SCORE (flashing)
//HIGH SCORE!!!
//	{0:0.000}bac
//Congrats! You're drunk!
void PlayHighScore(float hiscore)
{
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	27 97       	sbiw	r28, 0x07	; 7
    13d6:	0f b6       	in	r0, 0x3f	; 63
    13d8:	f8 94       	cli
    13da:	de bf       	out	0x3e, r29	; 62
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	cd bf       	out	0x3d, r28	; 61
	char text[7];
	//sprintf(text, "%.3f", hiscore);
	ftoa(hiscore, text, 3);
    13e0:	23 e0       	ldi	r18, 0x03	; 3
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	ae 01       	movw	r20, r28
    13e6:	4f 5f       	subi	r20, 0xFF	; 255
    13e8:	5f 4f       	sbci	r21, 0xFF	; 255
    13ea:	0e 94 0d 08 	call	0x101a	; 0x101a <ftoa>
	
	ssd1306_clear();
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
	ssd1306_string_font8x16xy(12, 0, "HIGH SCORE!!!");
    13f4:	47 ec       	ldi	r20, 0xC7	; 199
    13f6:	51 e0       	ldi	r21, 0x01	; 1
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	8c e0       	ldi	r24, 0x0C	; 12
    13fc:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_setpos(75, 3);
    1400:	63 e0       	ldi	r22, 0x03	; 3
    1402:	8b e4       	ldi	r24, 0x4B	; 75
    1404:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("bac");
    1408:	8e ea       	ldi	r24, 0xAE	; 174
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
	ssd1306_string_font8x16xy(35, 2, text);
    1410:	ae 01       	movw	r20, r28
    1412:	4f 5f       	subi	r20, 0xFF	; 255
    1414:	5f 4f       	sbci	r21, 0xFF	; 255
    1416:	62 e0       	ldi	r22, 0x02	; 2
    1418:	83 e2       	ldi	r24, 0x23	; 35
    141a:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
	ssd1306_setpos(37, 6);
    141e:	66 e0       	ldi	r22, 0x06	; 6
    1420:	85 e2       	ldi	r24, 0x25	; 37
    1422:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("Congrats!");
    1426:	85 ed       	ldi	r24, 0xD5	; 213
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
	ssd1306_setpos(19, 7);
    142e:	67 e0       	ldi	r22, 0x07	; 7
    1430:	83 e1       	ldi	r24, 0x13	; 19
    1432:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
	ssd1306_string_font6x8("You're a drunk!");
    1436:	8f ed       	ldi	r24, 0xDF	; 223
    1438:	91 e0       	ldi	r25, 0x01	; 1
    143a:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
	
	for(int i = 0; i < HIGHSCOREDELAY; i += HIGHSCORERESDELAY)
    143e:	00 e0       	ldi	r16, 0x00	; 0
    1440:	10 e0       	ldi	r17, 0x00	; 0
		prog = prog / 5.0f * M_PI; //Progress in terms of sin
		prog = (sin(prog) + 1.0f) / 2.0f * 5.0f;
		prog = round(prog);
		
		char led = (1 << (int)prog);
		DisplayProgress(led);
    1442:	ff 24       	eor	r15, r15
    1444:	f3 94       	inc	r15
	ssd1306_string_font6x8("You're a drunk!");
	
	for(int i = 0; i < HIGHSCOREDELAY; i += HIGHSCORERESDELAY)
	{
		float prog = (float)i / (float)HIGHSCORERESDELAY;
		prog = prog / 5.0f * M_PI; //Progress in terms of sin
    1446:	b8 01       	movw	r22, r16
    1448:	01 2e       	mov	r0, r17
    144a:	00 0c       	add	r0, r0
    144c:	88 0b       	sbc	r24, r24
    144e:	99 0b       	sbc	r25, r25
    1450:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__floatsisf>
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	48 ec       	ldi	r20, 0xC8	; 200
    145a:	51 e4       	ldi	r21, 0x41	; 65
    145c:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3>
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 ea       	ldi	r20, 0xA0	; 160
    1466:	50 e4       	ldi	r21, 0x40	; 64
    1468:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__divsf3>
		prog = (sin(prog) + 1.0f) / 2.0f * 5.0f;
    146c:	2b ed       	ldi	r18, 0xDB	; 219
    146e:	3f e0       	ldi	r19, 0x0F	; 15
    1470:	49 e4       	ldi	r20, 0x49	; 73
    1472:	50 e4       	ldi	r21, 0x40	; 64
    1474:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1478:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <sin>
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e0       	ldi	r20, 0x00	; 0
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 ea       	ldi	r20, 0xA0	; 160
    149a:	50 e4       	ldi	r21, 0x40	; 64
    149c:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
		prog = round(prog);
    14a0:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <round>
		
		char led = (1 << (int)prog);
		DisplayProgress(led);
    14a4:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <__fixsfsi>
    14a8:	8f 2d       	mov	r24, r15
    14aa:	01 c0       	rjmp	.+2      	; 0x14ae <PlayHighScore+0xe8>
    14ac:	88 0f       	add	r24, r24
    14ae:	6a 95       	dec	r22
    14b0:	ea f7       	brpl	.-6      	; 0x14ac <PlayHighScore+0xe6>
    14b2:	0e 94 89 06 	call	0xd12	; 0xd12 <DisplayProgress>
    14b6:	89 e6       	ldi	r24, 0x69	; 105
    14b8:	98 e1       	ldi	r25, 0x18	; 24
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <PlayHighScore+0xf4>
    14be:	00 c0       	rjmp	.+0      	; 0x14c0 <PlayHighScore+0xfa>
    14c0:	00 00       	nop
	ssd1306_setpos(37, 6);
	ssd1306_string_font6x8("Congrats!");
	ssd1306_setpos(19, 7);
	ssd1306_string_font6x8("You're a drunk!");
	
	for(int i = 0; i < HIGHSCOREDELAY; i += HIGHSCORERESDELAY)
    14c2:	07 5e       	subi	r16, 0xE7	; 231
    14c4:	1f 4f       	sbci	r17, 0xFF	; 255
    14c6:	00 31       	cpi	r16, 0x10	; 16
    14c8:	97 e2       	ldi	r25, 0x27	; 39
    14ca:	19 07       	cpc	r17, r25
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <PlayHighScore+0x10a>
    14ce:	bb cf       	rjmp	.-138    	; 0x1446 <PlayHighScore+0x80>
		DisplayProgress(led);
		
		_delay_ms(HIGHSCORERESDELAY);
	}
	
	DisplayProgress(0x00);
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	0e 94 89 06 	call	0xd12	; 0xd12 <DisplayProgress>
}
    14d6:	27 96       	adiw	r28, 0x07	; 7
    14d8:	0f b6       	in	r0, 0x3f	; 63
    14da:	f8 94       	cli
    14dc:	de bf       	out	0x3e, r29	; 62
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	cd bf       	out	0x3d, r28	; 61
    14e2:	df 91       	pop	r29
    14e4:	cf 91       	pop	r28
    14e6:	1f 91       	pop	r17
    14e8:	0f 91       	pop	r16
    14ea:	ff 90       	pop	r15
    14ec:	08 95       	ret

000014ee <main>:
 */ 

#include "main.h"

int main(void)
{
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	67 97       	sbiw	r28, 0x17	; 23
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
	#if F_CPU == 1000000UL
	CLKPR_SET(CLKPR_1MHZ);
    1502:	f8 94       	cli
    1504:	e1 e6       	ldi	r30, 0x61	; 97
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 e8       	ldi	r24, 0x80	; 128
    150a:	80 83       	st	Z, r24
    150c:	83 e0       	ldi	r24, 0x03	; 3
    150e:	80 83       	st	Z, r24
    1510:	78 94       	sei
    1512:	8f e0       	ldi	r24, 0x0F	; 15
    1514:	97 e2       	ldi	r25, 0x27	; 39
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	f1 f7       	brne	.-4      	; 0x1516 <main+0x28>
    151a:	00 c0       	rjmp	.+0      	; 0x151c <main+0x2e>
    151c:	00 00       	nop
	#error "CPU frequency should be either 1 MHz or 8 MHz"
	#endif
	
	//Initialize SSD1306
	_delay_ms(40);
	ssd1306_init();
    151e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <ssd1306_init>
	
	Initialize();
    1522:	0e 94 e6 04 	call	0x9cc	; 0x9cc <Initialize>
	printf("\x01");
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 b8 11 	call	0x2370	; 0x2370 <putchar>
	PlaySplashScreen();
    152e:	0e 94 14 05 	call	0xa28	; 0xa28 <PlaySplashScreen>
	printf("\x02");
    1532:	82 e0       	ldi	r24, 0x02	; 2
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 b8 11 	call	0x2370	; 0x2370 <putchar>
	PlayWarmUpScreen();
    153a:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <PlayWarmUpScreen>
	printf("\x03");
    153e:	83 e0       	ldi	r24, 0x03	; 3
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 b8 11 	call	0x2370	; 0x2370 <putchar>
	
	float hiscore;
	
	LoadStorage(&hiscore);
    1546:	ce 01       	movw	r24, r28
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <LoadStorage>
	TransmitReading(&hiscore, true);
    154e:	61 e0       	ldi	r22, 0x01	; 1
    1550:	ce 01       	movw	r24, r28
    1552:	01 96       	adiw	r24, 0x01	; 1
    1554:	0e 94 6e 05 	call	0xadc	; 0xadc <TransmitReading>
	
	float highscore = hiscore;
    1558:	d9 80       	ldd	r13, Y+1	; 0x01
    155a:	ca 80       	ldd	r12, Y+2	; 0x02
    155c:	bb 80       	ldd	r11, Y+3	; 0x03
    155e:	ac 80       	ldd	r10, Y+4	; 0x04
	float lastscore = 0.0f;
    1560:	1d 82       	std	Y+5, r1	; 0x05
    1562:	1e 82       	std	Y+6, r1	; 0x06
    1564:	1f 82       	std	Y+7, r1	; 0x07
    1566:	18 86       	std	Y+8, r1	; 0x08
    {
		char hiDisplay[7];
		char currentDisplay[7];
				
		//sprintf(hiDisplay, "%.3f", highscore);
		ftoa(highscore, hiDisplay, 3);
    1568:	23 e0       	ldi	r18, 0x03	; 3
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	ae 01       	movw	r20, r28
    156e:	40 5f       	subi	r20, 0xF0	; 240
    1570:	5f 4f       	sbci	r21, 0xFF	; 255
    1572:	6d 2d       	mov	r22, r13
    1574:	7c 2d       	mov	r23, r12
    1576:	8b 2d       	mov	r24, r11
    1578:	9a 2d       	mov	r25, r10
    157a:	0e 94 0d 08 	call	0x101a	; 0x101a <ftoa>
		//sprintf(currentDisplay, "%.3f", lastscore);
		ftoa(lastscore, currentDisplay, 3);
    157e:	6d 81       	ldd	r22, Y+5	; 0x05
    1580:	7e 81       	ldd	r23, Y+6	; 0x06
    1582:	8f 81       	ldd	r24, Y+7	; 0x07
    1584:	98 85       	ldd	r25, Y+8	; 0x08
    1586:	23 e0       	ldi	r18, 0x03	; 3
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	ae 01       	movw	r20, r28
    158c:	47 5f       	subi	r20, 0xF7	; 247
    158e:	5f 4f       	sbci	r21, 0xFF	; 255
    1590:	0e 94 0d 08 	call	0x101a	; 0x101a <ftoa>
				
		ssd1306_clear();
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ssd1306_fill>
				
		ssd1306_string_font8x16xy(0, 0, "High: ");
    159a:	4f ee       	ldi	r20, 0xEF	; 239
    159c:	51 e0       	ldi	r21, 0x01	; 1
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
		ssd1306_string_font8x16xy(0, 3, "Last: ");
    15a6:	46 ef       	ldi	r20, 0xF6	; 246
    15a8:	51 e0       	ldi	r21, 0x01	; 1
    15aa:	63 e0       	ldi	r22, 0x03	; 3
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
				
		ssd1306_string_font8x16xy(48, 0, hiDisplay);
    15b2:	ae 01       	movw	r20, r28
    15b4:	40 5f       	subi	r20, 0xF0	; 240
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	80 e3       	ldi	r24, 0x30	; 48
    15bc:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
		ssd1306_string_font8x16xy(48, 3, currentDisplay);
    15c0:	ae 01       	movw	r20, r28
    15c2:	47 5f       	subi	r20, 0xF7	; 247
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	63 e0       	ldi	r22, 0x03	; 3
    15c8:	80 e3       	ldi	r24, 0x30	; 48
    15ca:	0e 94 34 0c 	call	0x1868	; 0x1868 <ssd1306_string_font8x16xy>
				
		ssd1306_setpos(88, 1);
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	88 e5       	ldi	r24, 0x58	; 88
    15d2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8("bac");
    15d6:	8e ea       	ldi	r24, 0xAE	; 174
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
		ssd1306_setpos(88, 4);
    15de:	64 e0       	ldi	r22, 0x04	; 4
    15e0:	88 e5       	ldi	r24, 0x58	; 88
    15e2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8("bac");
    15e6:	8e ea       	ldi	r24, 0xAE	; 174
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
				
		ssd1306_setpos(0, 7);
    15ee:	67 e0       	ldi	r22, 0x07	; 7
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_string_font6x8("Ready to sample...");
    15f6:	8d ef       	ldi	r24, 0xFD	; 253
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0e 94 25 0c 	call	0x184a	; 0x184a <ssd1306_string_font6x8>
				
				
				
		char key = 0x00;
    15fe:	1f 8a       	std	Y+23, r1	; 0x17
		bool sampled = false;
		bool reset = false;
		while(sampled == false && reset == false)
		{
			if(ListenKeyPress(&key))
    1600:	ce 01       	movw	r24, r28
    1602:	47 96       	adiw	r24, 0x17	; 23
    1604:	0e 94 9c 05 	call	0xb38	; 0xb38 <ListenKeyPress>
    1608:	88 23       	and	r24, r24
    160a:	d1 f3       	breq	.-12     	; 0x1600 <main+0x112>
			{
				if((key & SAMPLEKEYCODE) == SAMPLEKEYCODE)
    160c:	8f 89       	ldd	r24, Y+23	; 0x17
    160e:	80 ff       	sbrs	r24, 0
    1610:	1b c0       	rjmp	.+54     	; 0x1648 <main+0x15a>
				{
					lastscore = PlaySampling();
    1612:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <PlaySampling>
    1616:	e6 2e       	mov	r14, r22
    1618:	f7 2e       	mov	r15, r23
    161a:	08 2f       	mov	r16, r24
    161c:	19 2f       	mov	r17, r25
    161e:	86 2f       	mov	r24, r22
    1620:	9f 2d       	mov	r25, r15
    1622:	a0 2f       	mov	r26, r16
    1624:	b1 2f       	mov	r27, r17
    1626:	8d 83       	std	Y+5, r24	; 0x05
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	af 83       	std	Y+7, r26	; 0x07
    162c:	b8 87       	std	Y+8, r27	; 0x08
			}
		}
				
		if(sampled)
		{
			if(lastscore >= highscore)
    162e:	2e 2d       	mov	r18, r14
    1630:	3f 2d       	mov	r19, r15
    1632:	40 2f       	mov	r20, r16
    1634:	51 2f       	mov	r21, r17
    1636:	6d 2d       	mov	r22, r13
    1638:	7c 2d       	mov	r23, r12
    163a:	8b 2d       	mov	r24, r11
    163c:	9a 2d       	mov	r25, r10
    163e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__cmpsf2>
    1642:	18 16       	cp	r1, r24
    1644:	44 f4       	brge	.+16     	; 0x1656 <main+0x168>
    1646:	18 c0       	rjmp	.+48     	; 0x1678 <main+0x18a>
				if((key & SAMPLEKEYCODE) == SAMPLEKEYCODE)
				{
					lastscore = PlaySampling();
					sampled = true;
				}
				else if((key & RESETKEYCODE) == RESETKEYCODE)
    1648:	81 ff       	sbrs	r24, 1
    164a:	da cf       	rjmp	.-76     	; 0x1600 <main+0x112>
				{
					reset = PlayResetScreen();
    164c:	0e 94 89 07 	call	0xf12	; 0xf12 <PlayResetScreen>
				
				
		char key = 0x00;
		bool sampled = false;
		bool reset = false;
		while(sampled == false && reset == false)
    1650:	88 23       	and	r24, r24
    1652:	b1 f2       	breq	.-84     	; 0x1600 <main+0x112>
    1654:	2a c0       	rjmp	.+84     	; 0x16aa <main+0x1bc>
		if(sampled)
		{
			if(lastscore >= highscore)
			{
				highscore = lastscore;
				SaveStorage(highscore);
    1656:	6e 2d       	mov	r22, r14
    1658:	7f 2d       	mov	r23, r15
    165a:	80 2f       	mov	r24, r16
    165c:	91 2f       	mov	r25, r17
    165e:	0e 94 35 05 	call	0xa6a	; 0xa6a <SaveStorage>
				PlayHighScore(lastscore);
    1662:	6d 81       	ldd	r22, Y+5	; 0x05
    1664:	7e 81       	ldd	r23, Y+6	; 0x06
    1666:	8f 81       	ldd	r24, Y+7	; 0x07
    1668:	98 85       	ldd	r25, Y+8	; 0x08
    166a:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <PlayHighScore>
				
		if(sampled)
		{
			if(lastscore >= highscore)
			{
				highscore = lastscore;
    166e:	de 2c       	mov	r13, r14
    1670:	cf 2c       	mov	r12, r15
    1672:	b0 2e       	mov	r11, r16
    1674:	a1 2e       	mov	r10, r17
    1676:	06 c0       	rjmp	.+12     	; 0x1684 <main+0x196>
				SaveStorage(highscore);
				PlayHighScore(lastscore);
			}
			else
			{
				PlayScore(lastscore);
    1678:	6e 2d       	mov	r22, r14
    167a:	7f 2d       	mov	r23, r15
    167c:	80 2f       	mov	r24, r16
    167e:	91 2f       	mov	r25, r17
    1680:	0e 94 a8 09 	call	0x1350	; 0x1350 <PlayScore>
			}
			TransmitReading(&lastscore, lastscore == hiscore);
    1684:	11 e0       	ldi	r17, 0x01	; 1
    1686:	29 81       	ldd	r18, Y+1	; 0x01
    1688:	3a 81       	ldd	r19, Y+2	; 0x02
    168a:	4b 81       	ldd	r20, Y+3	; 0x03
    168c:	5c 81       	ldd	r21, Y+4	; 0x04
    168e:	6d 81       	ldd	r22, Y+5	; 0x05
    1690:	7e 81       	ldd	r23, Y+6	; 0x06
    1692:	8f 81       	ldd	r24, Y+7	; 0x07
    1694:	98 85       	ldd	r25, Y+8	; 0x08
    1696:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <__cmpsf2>
    169a:	81 11       	cpse	r24, r1
    169c:	10 e0       	ldi	r17, 0x00	; 0
    169e:	61 2f       	mov	r22, r17
    16a0:	ce 01       	movw	r24, r28
    16a2:	05 96       	adiw	r24, 0x05	; 5
    16a4:	0e 94 6e 05 	call	0xadc	; 0xadc <TransmitReading>
    16a8:	5f cf       	rjmp	.-322    	; 0x1568 <main+0x7a>
		}
		else if(reset)
		{
			highscore = 0;
			lastscore = 0;
    16aa:	1d 82       	std	Y+5, r1	; 0x05
    16ac:	1e 82       	std	Y+6, r1	; 0x06
    16ae:	1f 82       	std	Y+7, r1	; 0x07
    16b0:	18 86       	std	Y+8, r1	; 0x08
			}
			TransmitReading(&lastscore, lastscore == hiscore);
		}
		else if(reset)
		{
			highscore = 0;
    16b2:	d1 2c       	mov	r13, r1
    16b4:	c1 2c       	mov	r12, r1
    16b6:	b1 2c       	mov	r11, r1
    16b8:	a1 2c       	mov	r10, r1
			lastscore = 0;
		}
    }
    16ba:	56 cf       	rjmp	.-340    	; 0x1568 <main+0x7a>

000016bc <ssd1306_xfer_start>:
	}
	ssd1306_send_data_stop();
}

void ssd1306_fill2(uint8_t p1, uint8_t p2) {
	ssd1306_fill4(p1, p2, p1, p2);
    16bc:	45 9a       	sbi	0x08, 5	; 8
    16be:	44 9a       	sbi	0x08, 4	; 8
    16c0:	44 98       	cbi	0x08, 4	; 8
    16c2:	45 98       	cbi	0x08, 5	; 8
    16c4:	08 95       	ret

000016c6 <ssd1306_xfer_stop>:
    16c6:	45 98       	cbi	0x08, 5	; 8
    16c8:	44 98       	cbi	0x08, 4	; 8
    16ca:	45 9a       	sbi	0x08, 5	; 8
    16cc:	44 9a       	sbi	0x08, 4	; 8
    16ce:	08 95       	ret

000016d0 <ssd1306_send_byte>:
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	ac 01       	movw	r20, r24
    16d8:	02 2e       	mov	r0, r18
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <ssd1306_send_byte+0x10>
    16dc:	44 0f       	add	r20, r20
    16de:	55 1f       	adc	r21, r21
    16e0:	0a 94       	dec	r0
    16e2:	e2 f7       	brpl	.-8      	; 0x16dc <ssd1306_send_byte+0xc>
    16e4:	47 ff       	sbrs	r20, 7
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <ssd1306_send_byte+0x1c>
    16e8:	44 9a       	sbi	0x08, 4	; 8
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <ssd1306_send_byte+0x1e>
    16ec:	44 98       	cbi	0x08, 4	; 8
    16ee:	45 9a       	sbi	0x08, 5	; 8
    16f0:	45 98       	cbi	0x08, 5	; 8
    16f2:	2f 5f       	subi	r18, 0xFF	; 255
    16f4:	3f 4f       	sbci	r19, 0xFF	; 255
    16f6:	28 30       	cpi	r18, 0x08	; 8
    16f8:	31 05       	cpc	r19, r1
    16fa:	69 f7       	brne	.-38     	; 0x16d6 <ssd1306_send_byte+0x6>
    16fc:	44 9a       	sbi	0x08, 4	; 8
    16fe:	45 9a       	sbi	0x08, 5	; 8
    1700:	45 98       	cbi	0x08, 5	; 8
    1702:	08 95       	ret

00001704 <ssd1306_send_command_start>:
    1704:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <ssd1306_xfer_start>
    1708:	88 e7       	ldi	r24, 0x78	; 120
    170a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    170e:	80 e0       	ldi	r24, 0x00	; 0
    1710:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    1714:	08 95       	ret

00001716 <ssd1306_send_command>:
    1716:	cf 93       	push	r28
    1718:	c8 2f       	mov	r28, r24
    171a:	0e 94 82 0b 	call	0x1704	; 0x1704 <ssd1306_send_command_start>
    171e:	8c 2f       	mov	r24, r28
    1720:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    1724:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <ssd1306_xfer_stop>
    1728:	cf 91       	pop	r28
    172a:	08 95       	ret

0000172c <ssd1306_send_data_start>:
    172c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <ssd1306_xfer_start>
    1730:	88 e7       	ldi	r24, 0x78	; 120
    1732:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    1736:	80 e4       	ldi	r24, 0x40	; 64
    1738:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    173c:	08 95       	ret

0000173e <ssd1306_send_data_stop>:
    173e:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <ssd1306_xfer_stop>
    1742:	08 95       	ret

00001744 <ssd1306_init>:
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	3c 9a       	sbi	0x07, 4	; 7
    174e:	3d 9a       	sbi	0x07, 5	; 7
    1750:	c6 e3       	ldi	r28, 0x36	; 54
    1752:	d1 e0       	ldi	r29, 0x01	; 1
    1754:	02 e5       	ldi	r16, 0x52	; 82
    1756:	11 e0       	ldi	r17, 0x01	; 1
    1758:	fe 01       	movw	r30, r28
    175a:	84 91       	lpm	r24, Z
    175c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <ssd1306_send_command>
    1760:	21 96       	adiw	r28, 0x01	; 1
    1762:	c0 17       	cp	r28, r16
    1764:	d1 07       	cpc	r29, r17
    1766:	c1 f7       	brne	.-16     	; 0x1758 <ssd1306_init+0x14>
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	08 95       	ret

00001772 <ssd1306_setpos>:
    1772:	cf 93       	push	r28
    1774:	df 93       	push	r29
    1776:	c8 2f       	mov	r28, r24
    1778:	d6 2f       	mov	r29, r22
    177a:	0e 94 82 0b 	call	0x1704	; 0x1704 <ssd1306_send_command_start>
    177e:	80 eb       	ldi	r24, 0xB0	; 176
    1780:	8d 0f       	add	r24, r29
    1782:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    1786:	8c 2f       	mov	r24, r28
    1788:	82 95       	swap	r24
    178a:	8f 70       	andi	r24, 0x0F	; 15
    178c:	80 61       	ori	r24, 0x10	; 16
    178e:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    1792:	8c 2f       	mov	r24, r28
    1794:	8f 70       	andi	r24, 0x0F	; 15
    1796:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    179a:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <ssd1306_xfer_stop>
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <ssd1306_fill4>:
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	e8 2e       	mov	r14, r24
    17b2:	f6 2e       	mov	r15, r22
    17b4:	04 2f       	mov	r16, r20
    17b6:	12 2f       	mov	r17, r18
    17b8:	60 e0       	ldi	r22, 0x00	; 0
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
    17c0:	0e 94 96 0b 	call	0x172c	; 0x172c <ssd1306_send_data_start>
    17c4:	c0 e0       	ldi	r28, 0x00	; 0
    17c6:	d1 e0       	ldi	r29, 0x01	; 1
    17c8:	8e 2d       	mov	r24, r14
    17ca:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    17ce:	8f 2d       	mov	r24, r15
    17d0:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    17d4:	80 2f       	mov	r24, r16
    17d6:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    17da:	81 2f       	mov	r24, r17
    17dc:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    17e0:	21 97       	sbiw	r28, 0x01	; 1
    17e2:	91 f7       	brne	.-28     	; 0x17c8 <ssd1306_fill4+0x24>
    17e4:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <ssd1306_xfer_stop>
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	08 95       	ret

000017f6 <ssd1306_fill>:
}

void ssd1306_fill(uint8_t p) {
	ssd1306_fill4(p, p, p, p);
    17f6:	28 2f       	mov	r18, r24
    17f8:	48 2f       	mov	r20, r24
    17fa:	68 2f       	mov	r22, r24
    17fc:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <ssd1306_fill4>
    1800:	08 95       	ret

00001802 <ssd1306_char_font6x8>:
}

// ----------------------------------------------------------------------------

void ssd1306_char_font6x8(char ch) {
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	08 2f       	mov	r16, r24
	uint8_t c = ch - 32;
	ssd1306_send_data_start();
    180c:	0e 94 96 0b 	call	0x172c	; 0x172c <ssd1306_send_data_start>
    1810:	00 52       	subi	r16, 0x20	; 32
    1812:	10 e0       	ldi	r17, 0x00	; 0
    1814:	c8 01       	movw	r24, r16
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	08 0f       	add	r16, r24
    181c:	19 1f       	adc	r17, r25
    181e:	00 0f       	add	r16, r16
    1820:	11 1f       	adc	r17, r17
    1822:	e8 01       	movw	r28, r16
    1824:	ce 5a       	subi	r28, 0xAE	; 174
    1826:	de 4f       	sbci	r29, 0xFE	; 254
    1828:	08 5a       	subi	r16, 0xA8	; 168
    182a:	1e 4f       	sbci	r17, 0xFE	; 254
	for (uint8_t i = 0; i < 6; i++)
	{
		ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
    182c:	fe 01       	movw	r30, r28
    182e:	84 91       	lpm	r24, Z
    1830:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    1834:	21 96       	adiw	r28, 0x01	; 1
// ----------------------------------------------------------------------------

void ssd1306_char_font6x8(char ch) {
	uint8_t c = ch - 32;
	ssd1306_send_data_start();
	for (uint8_t i = 0; i < 6; i++)
    1836:	c0 17       	cp	r28, r16
    1838:	d1 07       	cpc	r29, r17
    183a:	c1 f7       	brne	.-16     	; 0x182c <ssd1306_char_font6x8+0x2a>
	ssd1306_send_byte(0x40);	//write data
}

void ssd1306_send_data_stop(void)
{
	ssd1306_xfer_stop();
    183c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <ssd1306_xfer_stop>
	for (uint8_t i = 0; i < 6; i++)
	{
		ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font6x8[c * 6 + i]));
	}
	ssd1306_send_data_stop();
}
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	1f 91       	pop	r17
    1846:	0f 91       	pop	r16
    1848:	08 95       	ret

0000184a <ssd1306_string_font6x8>:

void ssd1306_string_font6x8(char *s) {
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
	while (*s) {
    1850:	88 81       	ld	r24, Y
    1852:	88 23       	and	r24, r24
    1854:	31 f0       	breq	.+12     	; 0x1862 <ssd1306_string_font6x8+0x18>
    1856:	21 96       	adiw	r28, 0x01	; 1
		ssd1306_char_font6x8(*s++);
    1858:	0e 94 01 0c 	call	0x1802	; 0x1802 <ssd1306_char_font6x8>
	}
	ssd1306_send_data_stop();
}

void ssd1306_string_font6x8(char *s) {
	while (*s) {
    185c:	89 91       	ld	r24, Y+
    185e:	81 11       	cpse	r24, r1
    1860:	fb cf       	rjmp	.-10     	; 0x1858 <ssd1306_string_font6x8+0xe>
		ssd1306_char_font6x8(*s++);
	}
}
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	08 95       	ret

00001868 <ssd1306_string_font8x16xy>:
	}
}

*/

void ssd1306_string_font8x16xy(uint8_t x, uint8_t y, const char s[]) {
    1868:	9f 92       	push	r9
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	b8 2e       	mov	r11, r24
    1880:	96 2e       	mov	r9, r22
    1882:	7a 01       	movw	r14, r20
	uint8_t ch, j = 0;
	while (s[j] != '\0') {
    1884:	fa 01       	movw	r30, r20
    1886:	00 81       	ld	r16, Z
    1888:	00 23       	and	r16, r16
    188a:	09 f4       	brne	.+2      	; 0x188e <ssd1306_string_font8x16xy+0x26>
    188c:	41 c0       	rjmp	.+130    	; 0x1910 <ssd1306_string_font8x16xy+0xa8>
    188e:	a1 2c       	mov	r10, r1
		ch = s[j] - 32;
    1890:	00 52       	subi	r16, 0x20	; 32
		if (x > 120) {
    1892:	f8 e7       	ldi	r31, 0x78	; 120
    1894:	fb 15       	cp	r31, r11
    1896:	10 f4       	brcc	.+4      	; 0x189c <ssd1306_string_font8x16xy+0x34>
			x = 0;
			y++;
    1898:	93 94       	inc	r9
void ssd1306_string_font8x16xy(uint8_t x, uint8_t y, const char s[]) {
	uint8_t ch, j = 0;
	while (s[j] != '\0') {
		ch = s[j] - 32;
		if (x > 120) {
			x = 0;
    189a:	b1 2c       	mov	r11, r1
			y++;
		}
		ssd1306_setpos(x, y);
    189c:	69 2d       	mov	r22, r9
    189e:	8b 2d       	mov	r24, r11
    18a0:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_send_data_start();
    18a4:	0e 94 96 0b 	call	0x172c	; 0x172c <ssd1306_send_data_start>
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font8x16[ch * 16 + i]));
    18a8:	80 e1       	ldi	r24, 0x10	; 16
    18aa:	08 9f       	mul	r16, r24
    18ac:	80 01       	movw	r16, r0
    18ae:	11 24       	eor	r1, r1
    18b0:	e8 01       	movw	r28, r16
    18b2:	c6 58       	subi	r28, 0x86	; 134
    18b4:	dc 4f       	sbci	r29, 0xFC	; 252
    18b6:	f8 01       	movw	r30, r16
    18b8:	ee 57       	subi	r30, 0x7E	; 126
    18ba:	fc 4f       	sbci	r31, 0xFC	; 252
    18bc:	6f 01       	movw	r12, r30
    18be:	fe 01       	movw	r30, r28
    18c0:	84 91       	lpm	r24, Z
    18c2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    18c6:	21 96       	adiw	r28, 0x01	; 1
			x = 0;
			y++;
		}
		ssd1306_setpos(x, y);
		ssd1306_send_data_start();
		for (uint8_t i = 0; i < 8; i++) {
    18c8:	cc 16       	cp	r12, r28
    18ca:	dd 06       	cpc	r13, r29
    18cc:	c1 f7       	brne	.-16     	; 0x18be <ssd1306_string_font8x16xy+0x56>
			ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font8x16[ch * 16 + i]));
		}
		ssd1306_send_data_stop();
    18ce:	0e 94 9f 0b 	call	0x173e	; 0x173e <ssd1306_send_data_stop>
		ssd1306_setpos(x, y + 1);
    18d2:	61 e0       	ldi	r22, 0x01	; 1
    18d4:	69 0d       	add	r22, r9
    18d6:	8b 2d       	mov	r24, r11
    18d8:	0e 94 b9 0b 	call	0x1772	; 0x1772 <ssd1306_setpos>
		ssd1306_send_data_start();
    18dc:	0e 94 96 0b 	call	0x172c	; 0x172c <ssd1306_send_data_start>
    18e0:	e8 01       	movw	r28, r16
    18e2:	ce 57       	subi	r28, 0x7E	; 126
    18e4:	dc 4f       	sbci	r29, 0xFC	; 252
    18e6:	06 57       	subi	r16, 0x76	; 118
    18e8:	1c 4f       	sbci	r17, 0xFC	; 252
		for (uint8_t i = 0; i < 8; i++) {
			ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font8x16[ch * 16 + i + 8]));
    18ea:	fe 01       	movw	r30, r28
    18ec:	84 91       	lpm	r24, Z
    18ee:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <ssd1306_send_byte>
    18f2:	21 96       	adiw	r28, 0x01	; 1
			ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font8x16[ch * 16 + i]));
		}
		ssd1306_send_data_stop();
		ssd1306_setpos(x, y + 1);
		ssd1306_send_data_start();
		for (uint8_t i = 0; i < 8; i++) {
    18f4:	0c 17       	cp	r16, r28
    18f6:	1d 07       	cpc	r17, r29
    18f8:	c1 f7       	brne	.-16     	; 0x18ea <ssd1306_string_font8x16xy+0x82>
			ssd1306_send_byte(pgm_read_byte(&ssd1306xled_font8x16[ch * 16 + i + 8]));
		}
		ssd1306_send_data_stop();
    18fa:	0e 94 9f 0b 	call	0x173e	; 0x173e <ssd1306_send_data_stop>
		x += 8;
    18fe:	f8 e0       	ldi	r31, 0x08	; 8
    1900:	bf 0e       	add	r11, r31
		j++;
    1902:	a3 94       	inc	r10

*/

void ssd1306_string_font8x16xy(uint8_t x, uint8_t y, const char s[]) {
	uint8_t ch, j = 0;
	while (s[j] != '\0') {
    1904:	f7 01       	movw	r30, r14
    1906:	ea 0d       	add	r30, r10
    1908:	f1 1d       	adc	r31, r1
    190a:	00 81       	ld	r16, Z
    190c:	01 11       	cpse	r16, r1
    190e:	c0 cf       	rjmp	.-128    	; 0x1890 <ssd1306_string_font8x16xy+0x28>
		}
		ssd1306_send_data_stop();
		x += 8;
		j++;
	}
}
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	1f 91       	pop	r17
    1916:	0f 91       	pop	r16
    1918:	ff 90       	pop	r15
    191a:	ef 90       	pop	r14
    191c:	df 90       	pop	r13
    191e:	cf 90       	pop	r12
    1920:	bf 90       	pop	r11
    1922:	af 90       	pop	r10
    1924:	9f 90       	pop	r9
    1926:	08 95       	ret

00001928 <__subsf3>:
    1928:	50 58       	subi	r21, 0x80	; 128

0000192a <__addsf3>:
    192a:	bb 27       	eor	r27, r27
    192c:	aa 27       	eor	r26, r26
    192e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__addsf3x>
    1932:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_round>
    1936:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_pscA>
    193a:	38 f0       	brcs	.+14     	; 0x194a <__addsf3+0x20>
    193c:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fp_pscB>
    1940:	20 f0       	brcs	.+8      	; 0x194a <__addsf3+0x20>
    1942:	39 f4       	brne	.+14     	; 0x1952 <__addsf3+0x28>
    1944:	9f 3f       	cpi	r25, 0xFF	; 255
    1946:	19 f4       	brne	.+6      	; 0x194e <__addsf3+0x24>
    1948:	26 f4       	brtc	.+8      	; 0x1952 <__addsf3+0x28>
    194a:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_nan>
    194e:	0e f4       	brtc	.+2      	; 0x1952 <__addsf3+0x28>
    1950:	e0 95       	com	r30
    1952:	e7 fb       	bst	r30, 7
    1954:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>

00001958 <__addsf3x>:
    1958:	e9 2f       	mov	r30, r25
    195a:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fp_split3>
    195e:	58 f3       	brcs	.-42     	; 0x1936 <__addsf3+0xc>
    1960:	ba 17       	cp	r27, r26
    1962:	62 07       	cpc	r22, r18
    1964:	73 07       	cpc	r23, r19
    1966:	84 07       	cpc	r24, r20
    1968:	95 07       	cpc	r25, r21
    196a:	20 f0       	brcs	.+8      	; 0x1974 <__addsf3x+0x1c>
    196c:	79 f4       	brne	.+30     	; 0x198c <__addsf3x+0x34>
    196e:	a6 f5       	brtc	.+104    	; 0x19d8 <__addsf3x+0x80>
    1970:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_zero>
    1974:	0e f4       	brtc	.+2      	; 0x1978 <__addsf3x+0x20>
    1976:	e0 95       	com	r30
    1978:	0b 2e       	mov	r0, r27
    197a:	ba 2f       	mov	r27, r26
    197c:	a0 2d       	mov	r26, r0
    197e:	0b 01       	movw	r0, r22
    1980:	b9 01       	movw	r22, r18
    1982:	90 01       	movw	r18, r0
    1984:	0c 01       	movw	r0, r24
    1986:	ca 01       	movw	r24, r20
    1988:	a0 01       	movw	r20, r0
    198a:	11 24       	eor	r1, r1
    198c:	ff 27       	eor	r31, r31
    198e:	59 1b       	sub	r21, r25
    1990:	99 f0       	breq	.+38     	; 0x19b8 <__addsf3x+0x60>
    1992:	59 3f       	cpi	r21, 0xF9	; 249
    1994:	50 f4       	brcc	.+20     	; 0x19aa <__addsf3x+0x52>
    1996:	50 3e       	cpi	r21, 0xE0	; 224
    1998:	68 f1       	brcs	.+90     	; 0x19f4 <__addsf3x+0x9c>
    199a:	1a 16       	cp	r1, r26
    199c:	f0 40       	sbci	r31, 0x00	; 0
    199e:	a2 2f       	mov	r26, r18
    19a0:	23 2f       	mov	r18, r19
    19a2:	34 2f       	mov	r19, r20
    19a4:	44 27       	eor	r20, r20
    19a6:	58 5f       	subi	r21, 0xF8	; 248
    19a8:	f3 cf       	rjmp	.-26     	; 0x1990 <__addsf3x+0x38>
    19aa:	46 95       	lsr	r20
    19ac:	37 95       	ror	r19
    19ae:	27 95       	ror	r18
    19b0:	a7 95       	ror	r26
    19b2:	f0 40       	sbci	r31, 0x00	; 0
    19b4:	53 95       	inc	r21
    19b6:	c9 f7       	brne	.-14     	; 0x19aa <__addsf3x+0x52>
    19b8:	7e f4       	brtc	.+30     	; 0x19d8 <__addsf3x+0x80>
    19ba:	1f 16       	cp	r1, r31
    19bc:	ba 0b       	sbc	r27, r26
    19be:	62 0b       	sbc	r22, r18
    19c0:	73 0b       	sbc	r23, r19
    19c2:	84 0b       	sbc	r24, r20
    19c4:	ba f0       	brmi	.+46     	; 0x19f4 <__addsf3x+0x9c>
    19c6:	91 50       	subi	r25, 0x01	; 1
    19c8:	a1 f0       	breq	.+40     	; 0x19f2 <__addsf3x+0x9a>
    19ca:	ff 0f       	add	r31, r31
    19cc:	bb 1f       	adc	r27, r27
    19ce:	66 1f       	adc	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	88 1f       	adc	r24, r24
    19d4:	c2 f7       	brpl	.-16     	; 0x19c6 <__addsf3x+0x6e>
    19d6:	0e c0       	rjmp	.+28     	; 0x19f4 <__addsf3x+0x9c>
    19d8:	ba 0f       	add	r27, r26
    19da:	62 1f       	adc	r22, r18
    19dc:	73 1f       	adc	r23, r19
    19de:	84 1f       	adc	r24, r20
    19e0:	48 f4       	brcc	.+18     	; 0x19f4 <__addsf3x+0x9c>
    19e2:	87 95       	ror	r24
    19e4:	77 95       	ror	r23
    19e6:	67 95       	ror	r22
    19e8:	b7 95       	ror	r27
    19ea:	f7 95       	ror	r31
    19ec:	9e 3f       	cpi	r25, 0xFE	; 254
    19ee:	08 f0       	brcs	.+2      	; 0x19f2 <__addsf3x+0x9a>
    19f0:	b0 cf       	rjmp	.-160    	; 0x1952 <__addsf3+0x28>
    19f2:	93 95       	inc	r25
    19f4:	88 0f       	add	r24, r24
    19f6:	08 f0       	brcs	.+2      	; 0x19fa <__addsf3x+0xa2>
    19f8:	99 27       	eor	r25, r25
    19fa:	ee 0f       	add	r30, r30
    19fc:	97 95       	ror	r25
    19fe:	87 95       	ror	r24
    1a00:	08 95       	ret

00001a02 <atan>:
    1a02:	df 93       	push	r29
    1a04:	dd 27       	eor	r29, r29
    1a06:	b9 2f       	mov	r27, r25
    1a08:	bf 77       	andi	r27, 0x7F	; 127
    1a0a:	40 e8       	ldi	r20, 0x80	; 128
    1a0c:	5f e3       	ldi	r21, 0x3F	; 63
    1a0e:	16 16       	cp	r1, r22
    1a10:	17 06       	cpc	r1, r23
    1a12:	48 07       	cpc	r20, r24
    1a14:	5b 07       	cpc	r21, r27
    1a16:	18 f4       	brcc	.+6      	; 0x1a1e <atan+0x1c>
    1a18:	d9 2f       	mov	r29, r25
    1a1a:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <inverse>
    1a1e:	9f 93       	push	r25
    1a20:	8f 93       	push	r24
    1a22:	7f 93       	push	r23
    1a24:	6f 93       	push	r22
    1a26:	0e 94 04 10 	call	0x2008	; 0x2008 <square>
    1a2a:	e8 e6       	ldi	r30, 0x68	; 104
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_powser>
    1a32:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_round>
    1a36:	2f 91       	pop	r18
    1a38:	3f 91       	pop	r19
    1a3a:	4f 91       	pop	r20
    1a3c:	5f 91       	pop	r21
    1a3e:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3x>
    1a42:	dd 23       	and	r29, r29
    1a44:	51 f0       	breq	.+20     	; 0x1a5a <atan+0x58>
    1a46:	90 58       	subi	r25, 0x80	; 128
    1a48:	a2 ea       	ldi	r26, 0xA2	; 162
    1a4a:	2a ed       	ldi	r18, 0xDA	; 218
    1a4c:	3f e0       	ldi	r19, 0x0F	; 15
    1a4e:	49 ec       	ldi	r20, 0xC9	; 201
    1a50:	5f e3       	ldi	r21, 0x3F	; 63
    1a52:	d0 78       	andi	r29, 0x80	; 128
    1a54:	5d 27       	eor	r21, r29
    1a56:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__addsf3x>
    1a5a:	df 91       	pop	r29
    1a5c:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_round>

00001a60 <__cmpsf2>:
    1a60:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_cmp>
    1a64:	08 f4       	brcc	.+2      	; 0x1a68 <__cmpsf2+0x8>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	08 95       	ret

00001a6a <__divsf3>:
    1a6a:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <__divsf3x>
    1a6e:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_round>
    1a72:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fp_pscB>
    1a76:	58 f0       	brcs	.+22     	; 0x1a8e <__divsf3+0x24>
    1a78:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_pscA>
    1a7c:	40 f0       	brcs	.+16     	; 0x1a8e <__divsf3+0x24>
    1a7e:	29 f4       	brne	.+10     	; 0x1a8a <__divsf3+0x20>
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <__divsf3+0x24>
    1a84:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1a88:	51 11       	cpse	r21, r1
    1a8a:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>
    1a8e:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_nan>

00001a92 <__divsf3x>:
    1a92:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fp_split3>
    1a96:	68 f3       	brcs	.-38     	; 0x1a72 <__divsf3+0x8>

00001a98 <__divsf3_pse>:
    1a98:	99 23       	and	r25, r25
    1a9a:	b1 f3       	breq	.-20     	; 0x1a88 <__divsf3+0x1e>
    1a9c:	55 23       	and	r21, r21
    1a9e:	91 f3       	breq	.-28     	; 0x1a84 <__divsf3+0x1a>
    1aa0:	95 1b       	sub	r25, r21
    1aa2:	55 0b       	sbc	r21, r21
    1aa4:	bb 27       	eor	r27, r27
    1aa6:	aa 27       	eor	r26, r26
    1aa8:	62 17       	cp	r22, r18
    1aaa:	73 07       	cpc	r23, r19
    1aac:	84 07       	cpc	r24, r20
    1aae:	38 f0       	brcs	.+14     	; 0x1abe <__divsf3_pse+0x26>
    1ab0:	9f 5f       	subi	r25, 0xFF	; 255
    1ab2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab4:	22 0f       	add	r18, r18
    1ab6:	33 1f       	adc	r19, r19
    1ab8:	44 1f       	adc	r20, r20
    1aba:	aa 1f       	adc	r26, r26
    1abc:	a9 f3       	breq	.-22     	; 0x1aa8 <__divsf3_pse+0x10>
    1abe:	35 d0       	rcall	.+106    	; 0x1b2a <__divsf3_pse+0x92>
    1ac0:	0e 2e       	mov	r0, r30
    1ac2:	3a f0       	brmi	.+14     	; 0x1ad2 <__divsf3_pse+0x3a>
    1ac4:	e0 e8       	ldi	r30, 0x80	; 128
    1ac6:	32 d0       	rcall	.+100    	; 0x1b2c <__divsf3_pse+0x94>
    1ac8:	91 50       	subi	r25, 0x01	; 1
    1aca:	50 40       	sbci	r21, 0x00	; 0
    1acc:	e6 95       	lsr	r30
    1ace:	00 1c       	adc	r0, r0
    1ad0:	ca f7       	brpl	.-14     	; 0x1ac4 <__divsf3_pse+0x2c>
    1ad2:	2b d0       	rcall	.+86     	; 0x1b2a <__divsf3_pse+0x92>
    1ad4:	fe 2f       	mov	r31, r30
    1ad6:	29 d0       	rcall	.+82     	; 0x1b2a <__divsf3_pse+0x92>
    1ad8:	66 0f       	add	r22, r22
    1ada:	77 1f       	adc	r23, r23
    1adc:	88 1f       	adc	r24, r24
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	26 17       	cp	r18, r22
    1ae2:	37 07       	cpc	r19, r23
    1ae4:	48 07       	cpc	r20, r24
    1ae6:	ab 07       	cpc	r26, r27
    1ae8:	b0 e8       	ldi	r27, 0x80	; 128
    1aea:	09 f0       	breq	.+2      	; 0x1aee <__divsf3_pse+0x56>
    1aec:	bb 0b       	sbc	r27, r27
    1aee:	80 2d       	mov	r24, r0
    1af0:	bf 01       	movw	r22, r30
    1af2:	ff 27       	eor	r31, r31
    1af4:	93 58       	subi	r25, 0x83	; 131
    1af6:	5f 4f       	sbci	r21, 0xFF	; 255
    1af8:	3a f0       	brmi	.+14     	; 0x1b08 <__divsf3_pse+0x70>
    1afa:	9e 3f       	cpi	r25, 0xFE	; 254
    1afc:	51 05       	cpc	r21, r1
    1afe:	78 f0       	brcs	.+30     	; 0x1b1e <__divsf3_pse+0x86>
    1b00:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1b04:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>
    1b08:	5f 3f       	cpi	r21, 0xFF	; 255
    1b0a:	e4 f3       	brlt	.-8      	; 0x1b04 <__divsf3_pse+0x6c>
    1b0c:	98 3e       	cpi	r25, 0xE8	; 232
    1b0e:	d4 f3       	brlt	.-12     	; 0x1b04 <__divsf3_pse+0x6c>
    1b10:	86 95       	lsr	r24
    1b12:	77 95       	ror	r23
    1b14:	67 95       	ror	r22
    1b16:	b7 95       	ror	r27
    1b18:	f7 95       	ror	r31
    1b1a:	9f 5f       	subi	r25, 0xFF	; 255
    1b1c:	c9 f7       	brne	.-14     	; 0x1b10 <__divsf3_pse+0x78>
    1b1e:	88 0f       	add	r24, r24
    1b20:	91 1d       	adc	r25, r1
    1b22:	96 95       	lsr	r25
    1b24:	87 95       	ror	r24
    1b26:	97 f9       	bld	r25, 7
    1b28:	08 95       	ret
    1b2a:	e1 e0       	ldi	r30, 0x01	; 1
    1b2c:	66 0f       	add	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	bb 1f       	adc	r27, r27
    1b34:	62 17       	cp	r22, r18
    1b36:	73 07       	cpc	r23, r19
    1b38:	84 07       	cpc	r24, r20
    1b3a:	ba 07       	cpc	r27, r26
    1b3c:	20 f0       	brcs	.+8      	; 0x1b46 <__divsf3_pse+0xae>
    1b3e:	62 1b       	sub	r22, r18
    1b40:	73 0b       	sbc	r23, r19
    1b42:	84 0b       	sbc	r24, r20
    1b44:	ba 0b       	sbc	r27, r26
    1b46:	ee 1f       	adc	r30, r30
    1b48:	88 f7       	brcc	.-30     	; 0x1b2c <__divsf3_pse+0x94>
    1b4a:	e0 95       	com	r30
    1b4c:	08 95       	ret

00001b4e <__fixsfsi>:
    1b4e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <__fixunssfsi>
    1b52:	68 94       	set
    1b54:	b1 11       	cpse	r27, r1
    1b56:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>
    1b5a:	08 95       	ret

00001b5c <__fixunssfsi>:
    1b5c:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_splitA>
    1b60:	88 f0       	brcs	.+34     	; 0x1b84 <__fixunssfsi+0x28>
    1b62:	9f 57       	subi	r25, 0x7F	; 127
    1b64:	98 f0       	brcs	.+38     	; 0x1b8c <__fixunssfsi+0x30>
    1b66:	b9 2f       	mov	r27, r25
    1b68:	99 27       	eor	r25, r25
    1b6a:	b7 51       	subi	r27, 0x17	; 23
    1b6c:	b0 f0       	brcs	.+44     	; 0x1b9a <__fixunssfsi+0x3e>
    1b6e:	e1 f0       	breq	.+56     	; 0x1ba8 <__fixunssfsi+0x4c>
    1b70:	66 0f       	add	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	88 1f       	adc	r24, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	1a f0       	brmi	.+6      	; 0x1b80 <__fixunssfsi+0x24>
    1b7a:	ba 95       	dec	r27
    1b7c:	c9 f7       	brne	.-14     	; 0x1b70 <__fixunssfsi+0x14>
    1b7e:	14 c0       	rjmp	.+40     	; 0x1ba8 <__fixunssfsi+0x4c>
    1b80:	b1 30       	cpi	r27, 0x01	; 1
    1b82:	91 f0       	breq	.+36     	; 0x1ba8 <__fixunssfsi+0x4c>
    1b84:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <__fp_zero>
    1b88:	b1 e0       	ldi	r27, 0x01	; 1
    1b8a:	08 95       	ret
    1b8c:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_zero>
    1b90:	67 2f       	mov	r22, r23
    1b92:	78 2f       	mov	r23, r24
    1b94:	88 27       	eor	r24, r24
    1b96:	b8 5f       	subi	r27, 0xF8	; 248
    1b98:	39 f0       	breq	.+14     	; 0x1ba8 <__fixunssfsi+0x4c>
    1b9a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b9c:	cc f3       	brlt	.-14     	; 0x1b90 <__fixunssfsi+0x34>
    1b9e:	86 95       	lsr	r24
    1ba0:	77 95       	ror	r23
    1ba2:	67 95       	ror	r22
    1ba4:	b3 95       	inc	r27
    1ba6:	d9 f7       	brne	.-10     	; 0x1b9e <__fixunssfsi+0x42>
    1ba8:	3e f4       	brtc	.+14     	; 0x1bb8 <__fixunssfsi+0x5c>
    1baa:	90 95       	com	r25
    1bac:	80 95       	com	r24
    1bae:	70 95       	com	r23
    1bb0:	61 95       	neg	r22
    1bb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb8:	08 95       	ret

00001bba <__floatunsisf>:
    1bba:	e8 94       	clt
    1bbc:	09 c0       	rjmp	.+18     	; 0x1bd0 <__floatsisf+0x12>

00001bbe <__floatsisf>:
    1bbe:	97 fb       	bst	r25, 7
    1bc0:	3e f4       	brtc	.+14     	; 0x1bd0 <__floatsisf+0x12>
    1bc2:	90 95       	com	r25
    1bc4:	80 95       	com	r24
    1bc6:	70 95       	com	r23
    1bc8:	61 95       	neg	r22
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	99 23       	and	r25, r25
    1bd2:	a9 f0       	breq	.+42     	; 0x1bfe <__floatsisf+0x40>
    1bd4:	f9 2f       	mov	r31, r25
    1bd6:	96 e9       	ldi	r25, 0x96	; 150
    1bd8:	bb 27       	eor	r27, r27
    1bda:	93 95       	inc	r25
    1bdc:	f6 95       	lsr	r31
    1bde:	87 95       	ror	r24
    1be0:	77 95       	ror	r23
    1be2:	67 95       	ror	r22
    1be4:	b7 95       	ror	r27
    1be6:	f1 11       	cpse	r31, r1
    1be8:	f8 cf       	rjmp	.-16     	; 0x1bda <__floatsisf+0x1c>
    1bea:	fa f4       	brpl	.+62     	; 0x1c2a <__floatsisf+0x6c>
    1bec:	bb 0f       	add	r27, r27
    1bee:	11 f4       	brne	.+4      	; 0x1bf4 <__floatsisf+0x36>
    1bf0:	60 ff       	sbrs	r22, 0
    1bf2:	1b c0       	rjmp	.+54     	; 0x1c2a <__floatsisf+0x6c>
    1bf4:	6f 5f       	subi	r22, 0xFF	; 255
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    1bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    1bfc:	16 c0       	rjmp	.+44     	; 0x1c2a <__floatsisf+0x6c>
    1bfe:	88 23       	and	r24, r24
    1c00:	11 f0       	breq	.+4      	; 0x1c06 <__floatsisf+0x48>
    1c02:	96 e9       	ldi	r25, 0x96	; 150
    1c04:	11 c0       	rjmp	.+34     	; 0x1c28 <__floatsisf+0x6a>
    1c06:	77 23       	and	r23, r23
    1c08:	21 f0       	breq	.+8      	; 0x1c12 <__floatsisf+0x54>
    1c0a:	9e e8       	ldi	r25, 0x8E	; 142
    1c0c:	87 2f       	mov	r24, r23
    1c0e:	76 2f       	mov	r23, r22
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <__floatsisf+0x5e>
    1c12:	66 23       	and	r22, r22
    1c14:	71 f0       	breq	.+28     	; 0x1c32 <__floatsisf+0x74>
    1c16:	96 e8       	ldi	r25, 0x86	; 134
    1c18:	86 2f       	mov	r24, r22
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	60 e0       	ldi	r22, 0x00	; 0
    1c1e:	2a f0       	brmi	.+10     	; 0x1c2a <__floatsisf+0x6c>
    1c20:	9a 95       	dec	r25
    1c22:	66 0f       	add	r22, r22
    1c24:	77 1f       	adc	r23, r23
    1c26:	88 1f       	adc	r24, r24
    1c28:	da f7       	brpl	.-10     	; 0x1c20 <__floatsisf+0x62>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	96 95       	lsr	r25
    1c2e:	87 95       	ror	r24
    1c30:	97 f9       	bld	r25, 7
    1c32:	08 95       	ret

00001c34 <floor>:
    1c34:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fp_trunc>
    1c38:	90 f0       	brcs	.+36     	; 0x1c5e <floor+0x2a>
    1c3a:	9f 37       	cpi	r25, 0x7F	; 127
    1c3c:	48 f4       	brcc	.+18     	; 0x1c50 <floor+0x1c>
    1c3e:	91 11       	cpse	r25, r1
    1c40:	16 f0       	brts	.+4      	; 0x1c46 <floor+0x12>
    1c42:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	70 e0       	ldi	r23, 0x00	; 0
    1c4a:	80 e8       	ldi	r24, 0x80	; 128
    1c4c:	9f eb       	ldi	r25, 0xBF	; 191
    1c4e:	08 95       	ret
    1c50:	26 f4       	brtc	.+8      	; 0x1c5a <floor+0x26>
    1c52:	1b 16       	cp	r1, r27
    1c54:	61 1d       	adc	r22, r1
    1c56:	71 1d       	adc	r23, r1
    1c58:	81 1d       	adc	r24, r1
    1c5a:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_mintl>
    1c5e:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__fp_mpack>

00001c62 <__fp_cmp>:
    1c62:	99 0f       	add	r25, r25
    1c64:	00 08       	sbc	r0, r0
    1c66:	55 0f       	add	r21, r21
    1c68:	aa 0b       	sbc	r26, r26
    1c6a:	e0 e8       	ldi	r30, 0x80	; 128
    1c6c:	fe ef       	ldi	r31, 0xFE	; 254
    1c6e:	16 16       	cp	r1, r22
    1c70:	17 06       	cpc	r1, r23
    1c72:	e8 07       	cpc	r30, r24
    1c74:	f9 07       	cpc	r31, r25
    1c76:	c0 f0       	brcs	.+48     	; 0x1ca8 <__fp_cmp+0x46>
    1c78:	12 16       	cp	r1, r18
    1c7a:	13 06       	cpc	r1, r19
    1c7c:	e4 07       	cpc	r30, r20
    1c7e:	f5 07       	cpc	r31, r21
    1c80:	98 f0       	brcs	.+38     	; 0x1ca8 <__fp_cmp+0x46>
    1c82:	62 1b       	sub	r22, r18
    1c84:	73 0b       	sbc	r23, r19
    1c86:	84 0b       	sbc	r24, r20
    1c88:	95 0b       	sbc	r25, r21
    1c8a:	39 f4       	brne	.+14     	; 0x1c9a <__fp_cmp+0x38>
    1c8c:	0a 26       	eor	r0, r26
    1c8e:	61 f0       	breq	.+24     	; 0x1ca8 <__fp_cmp+0x46>
    1c90:	23 2b       	or	r18, r19
    1c92:	24 2b       	or	r18, r20
    1c94:	25 2b       	or	r18, r21
    1c96:	21 f4       	brne	.+8      	; 0x1ca0 <__fp_cmp+0x3e>
    1c98:	08 95       	ret
    1c9a:	0a 26       	eor	r0, r26
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <__fp_cmp+0x3e>
    1c9e:	a1 40       	sbci	r26, 0x01	; 1
    1ca0:	a6 95       	lsr	r26
    1ca2:	8f ef       	ldi	r24, 0xFF	; 255
    1ca4:	81 1d       	adc	r24, r1
    1ca6:	81 1d       	adc	r24, r1
    1ca8:	08 95       	ret

00001caa <__fp_inf>:
    1caa:	97 f9       	bld	r25, 7
    1cac:	9f 67       	ori	r25, 0x7F	; 127
    1cae:	80 e8       	ldi	r24, 0x80	; 128
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	60 e0       	ldi	r22, 0x00	; 0
    1cb4:	08 95       	ret

00001cb6 <__fp_mintl>:
    1cb6:	88 23       	and	r24, r24
    1cb8:	71 f4       	brne	.+28     	; 0x1cd6 <__fp_mintl+0x20>
    1cba:	77 23       	and	r23, r23
    1cbc:	21 f0       	breq	.+8      	; 0x1cc6 <__fp_mintl+0x10>
    1cbe:	98 50       	subi	r25, 0x08	; 8
    1cc0:	87 2b       	or	r24, r23
    1cc2:	76 2f       	mov	r23, r22
    1cc4:	07 c0       	rjmp	.+14     	; 0x1cd4 <__fp_mintl+0x1e>
    1cc6:	66 23       	and	r22, r22
    1cc8:	11 f4       	brne	.+4      	; 0x1cce <__fp_mintl+0x18>
    1cca:	99 27       	eor	r25, r25
    1ccc:	0d c0       	rjmp	.+26     	; 0x1ce8 <__fp_mintl+0x32>
    1cce:	90 51       	subi	r25, 0x10	; 16
    1cd0:	86 2b       	or	r24, r22
    1cd2:	70 e0       	ldi	r23, 0x00	; 0
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	2a f0       	brmi	.+10     	; 0x1ce2 <__fp_mintl+0x2c>
    1cd8:	9a 95       	dec	r25
    1cda:	66 0f       	add	r22, r22
    1cdc:	77 1f       	adc	r23, r23
    1cde:	88 1f       	adc	r24, r24
    1ce0:	da f7       	brpl	.-10     	; 0x1cd8 <__fp_mintl+0x22>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	96 95       	lsr	r25
    1ce6:	87 95       	ror	r24
    1ce8:	97 f9       	bld	r25, 7
    1cea:	08 95       	ret

00001cec <__fp_mpack>:
    1cec:	9f 3f       	cpi	r25, 0xFF	; 255
    1cee:	31 f0       	breq	.+12     	; 0x1cfc <__fp_mpack_finite+0xc>

00001cf0 <__fp_mpack_finite>:
    1cf0:	91 50       	subi	r25, 0x01	; 1
    1cf2:	20 f4       	brcc	.+8      	; 0x1cfc <__fp_mpack_finite+0xc>
    1cf4:	87 95       	ror	r24
    1cf6:	77 95       	ror	r23
    1cf8:	67 95       	ror	r22
    1cfa:	b7 95       	ror	r27
    1cfc:	88 0f       	add	r24, r24
    1cfe:	91 1d       	adc	r25, r1
    1d00:	96 95       	lsr	r25
    1d02:	87 95       	ror	r24
    1d04:	97 f9       	bld	r25, 7
    1d06:	08 95       	ret

00001d08 <__fp_nan>:
    1d08:	9f ef       	ldi	r25, 0xFF	; 255
    1d0a:	80 ec       	ldi	r24, 0xC0	; 192
    1d0c:	08 95       	ret

00001d0e <__fp_powser>:
    1d0e:	df 93       	push	r29
    1d10:	cf 93       	push	r28
    1d12:	1f 93       	push	r17
    1d14:	0f 93       	push	r16
    1d16:	ff 92       	push	r15
    1d18:	ef 92       	push	r14
    1d1a:	df 92       	push	r13
    1d1c:	7b 01       	movw	r14, r22
    1d1e:	8c 01       	movw	r16, r24
    1d20:	68 94       	set
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <__fp_powser+0x22>
    1d24:	da 2e       	mov	r13, r26
    1d26:	ef 01       	movw	r28, r30
    1d28:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3x>
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e8 94       	clt
    1d30:	a5 91       	lpm	r26, Z+
    1d32:	25 91       	lpm	r18, Z+
    1d34:	35 91       	lpm	r19, Z+
    1d36:	45 91       	lpm	r20, Z+
    1d38:	55 91       	lpm	r21, Z+
    1d3a:	a6 f3       	brts	.-24     	; 0x1d24 <__fp_powser+0x16>
    1d3c:	ef 01       	movw	r28, r30
    1d3e:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__addsf3x>
    1d42:	fe 01       	movw	r30, r28
    1d44:	97 01       	movw	r18, r14
    1d46:	a8 01       	movw	r20, r16
    1d48:	da 94       	dec	r13
    1d4a:	69 f7       	brne	.-38     	; 0x1d26 <__fp_powser+0x18>
    1d4c:	df 90       	pop	r13
    1d4e:	ef 90       	pop	r14
    1d50:	ff 90       	pop	r15
    1d52:	0f 91       	pop	r16
    1d54:	1f 91       	pop	r17
    1d56:	cf 91       	pop	r28
    1d58:	df 91       	pop	r29
    1d5a:	08 95       	ret

00001d5c <__fp_pscA>:
    1d5c:	00 24       	eor	r0, r0
    1d5e:	0a 94       	dec	r0
    1d60:	16 16       	cp	r1, r22
    1d62:	17 06       	cpc	r1, r23
    1d64:	18 06       	cpc	r1, r24
    1d66:	09 06       	cpc	r0, r25
    1d68:	08 95       	ret

00001d6a <__fp_pscB>:
    1d6a:	00 24       	eor	r0, r0
    1d6c:	0a 94       	dec	r0
    1d6e:	12 16       	cp	r1, r18
    1d70:	13 06       	cpc	r1, r19
    1d72:	14 06       	cpc	r1, r20
    1d74:	05 06       	cpc	r0, r21
    1d76:	08 95       	ret

00001d78 <__fp_round>:
    1d78:	09 2e       	mov	r0, r25
    1d7a:	03 94       	inc	r0
    1d7c:	00 0c       	add	r0, r0
    1d7e:	11 f4       	brne	.+4      	; 0x1d84 <__fp_round+0xc>
    1d80:	88 23       	and	r24, r24
    1d82:	52 f0       	brmi	.+20     	; 0x1d98 <__fp_round+0x20>
    1d84:	bb 0f       	add	r27, r27
    1d86:	40 f4       	brcc	.+16     	; 0x1d98 <__fp_round+0x20>
    1d88:	bf 2b       	or	r27, r31
    1d8a:	11 f4       	brne	.+4      	; 0x1d90 <__fp_round+0x18>
    1d8c:	60 ff       	sbrs	r22, 0
    1d8e:	04 c0       	rjmp	.+8      	; 0x1d98 <__fp_round+0x20>
    1d90:	6f 5f       	subi	r22, 0xFF	; 255
    1d92:	7f 4f       	sbci	r23, 0xFF	; 255
    1d94:	8f 4f       	sbci	r24, 0xFF	; 255
    1d96:	9f 4f       	sbci	r25, 0xFF	; 255
    1d98:	08 95       	ret

00001d9a <__fp_split3>:
    1d9a:	57 fd       	sbrc	r21, 7
    1d9c:	90 58       	subi	r25, 0x80	; 128
    1d9e:	44 0f       	add	r20, r20
    1da0:	55 1f       	adc	r21, r21
    1da2:	59 f0       	breq	.+22     	; 0x1dba <__fp_splitA+0x10>
    1da4:	5f 3f       	cpi	r21, 0xFF	; 255
    1da6:	71 f0       	breq	.+28     	; 0x1dc4 <__fp_splitA+0x1a>
    1da8:	47 95       	ror	r20

00001daa <__fp_splitA>:
    1daa:	88 0f       	add	r24, r24
    1dac:	97 fb       	bst	r25, 7
    1dae:	99 1f       	adc	r25, r25
    1db0:	61 f0       	breq	.+24     	; 0x1dca <__fp_splitA+0x20>
    1db2:	9f 3f       	cpi	r25, 0xFF	; 255
    1db4:	79 f0       	breq	.+30     	; 0x1dd4 <__fp_splitA+0x2a>
    1db6:	87 95       	ror	r24
    1db8:	08 95       	ret
    1dba:	12 16       	cp	r1, r18
    1dbc:	13 06       	cpc	r1, r19
    1dbe:	14 06       	cpc	r1, r20
    1dc0:	55 1f       	adc	r21, r21
    1dc2:	f2 cf       	rjmp	.-28     	; 0x1da8 <__fp_split3+0xe>
    1dc4:	46 95       	lsr	r20
    1dc6:	f1 df       	rcall	.-30     	; 0x1daa <__fp_splitA>
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <__fp_splitA+0x30>
    1dca:	16 16       	cp	r1, r22
    1dcc:	17 06       	cpc	r1, r23
    1dce:	18 06       	cpc	r1, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	f1 cf       	rjmp	.-30     	; 0x1db6 <__fp_splitA+0xc>
    1dd4:	86 95       	lsr	r24
    1dd6:	71 05       	cpc	r23, r1
    1dd8:	61 05       	cpc	r22, r1
    1dda:	08 94       	sec
    1ddc:	08 95       	ret

00001dde <__fp_trunc>:
    1dde:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_splitA>
    1de2:	a0 f0       	brcs	.+40     	; 0x1e0c <__fp_trunc+0x2e>
    1de4:	be e7       	ldi	r27, 0x7E	; 126
    1de6:	b9 17       	cp	r27, r25
    1de8:	88 f4       	brcc	.+34     	; 0x1e0c <__fp_trunc+0x2e>
    1dea:	bb 27       	eor	r27, r27
    1dec:	9f 38       	cpi	r25, 0x8F	; 143
    1dee:	60 f4       	brcc	.+24     	; 0x1e08 <__fp_trunc+0x2a>
    1df0:	16 16       	cp	r1, r22
    1df2:	b1 1d       	adc	r27, r1
    1df4:	67 2f       	mov	r22, r23
    1df6:	78 2f       	mov	r23, r24
    1df8:	88 27       	eor	r24, r24
    1dfa:	98 5f       	subi	r25, 0xF8	; 248
    1dfc:	f7 cf       	rjmp	.-18     	; 0x1dec <__fp_trunc+0xe>
    1dfe:	86 95       	lsr	r24
    1e00:	77 95       	ror	r23
    1e02:	67 95       	ror	r22
    1e04:	b1 1d       	adc	r27, r1
    1e06:	93 95       	inc	r25
    1e08:	96 39       	cpi	r25, 0x96	; 150
    1e0a:	c8 f3       	brcs	.-14     	; 0x1dfe <__fp_trunc+0x20>
    1e0c:	08 95       	ret

00001e0e <__fp_zero>:
    1e0e:	e8 94       	clt

00001e10 <__fp_szero>:
    1e10:	bb 27       	eor	r27, r27
    1e12:	66 27       	eor	r22, r22
    1e14:	77 27       	eor	r23, r23
    1e16:	cb 01       	movw	r24, r22
    1e18:	97 f9       	bld	r25, 7
    1e1a:	08 95       	ret

00001e1c <__gesf2>:
    1e1c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_cmp>
    1e20:	08 f4       	brcc	.+2      	; 0x1e24 <__gesf2+0x8>
    1e22:	8f ef       	ldi	r24, 0xFF	; 255
    1e24:	08 95       	ret

00001e26 <inverse>:
    1e26:	9b 01       	movw	r18, r22
    1e28:	ac 01       	movw	r20, r24
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	70 e0       	ldi	r23, 0x00	; 0
    1e2e:	80 e8       	ldi	r24, 0x80	; 128
    1e30:	9f e3       	ldi	r25, 0x3F	; 63
    1e32:	0c 94 35 0d 	jmp	0x1a6a	; 0x1a6a <__divsf3>

00001e36 <__mulsf3>:
    1e36:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3x>
    1e3a:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_round>
    1e3e:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__fp_pscA>
    1e42:	38 f0       	brcs	.+14     	; 0x1e52 <__mulsf3+0x1c>
    1e44:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <__fp_pscB>
    1e48:	20 f0       	brcs	.+8      	; 0x1e52 <__mulsf3+0x1c>
    1e4a:	95 23       	and	r25, r21
    1e4c:	11 f0       	breq	.+4      	; 0x1e52 <__mulsf3+0x1c>
    1e4e:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1e52:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_nan>
    1e56:	11 24       	eor	r1, r1
    1e58:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>

00001e5c <__mulsf3x>:
    1e5c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <__fp_split3>
    1e60:	70 f3       	brcs	.-36     	; 0x1e3e <__mulsf3+0x8>

00001e62 <__mulsf3_pse>:
    1e62:	95 9f       	mul	r25, r21
    1e64:	c1 f3       	breq	.-16     	; 0x1e56 <__mulsf3+0x20>
    1e66:	95 0f       	add	r25, r21
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	55 1f       	adc	r21, r21
    1e6c:	62 9f       	mul	r22, r18
    1e6e:	f0 01       	movw	r30, r0
    1e70:	72 9f       	mul	r23, r18
    1e72:	bb 27       	eor	r27, r27
    1e74:	f0 0d       	add	r31, r0
    1e76:	b1 1d       	adc	r27, r1
    1e78:	63 9f       	mul	r22, r19
    1e7a:	aa 27       	eor	r26, r26
    1e7c:	f0 0d       	add	r31, r0
    1e7e:	b1 1d       	adc	r27, r1
    1e80:	aa 1f       	adc	r26, r26
    1e82:	64 9f       	mul	r22, r20
    1e84:	66 27       	eor	r22, r22
    1e86:	b0 0d       	add	r27, r0
    1e88:	a1 1d       	adc	r26, r1
    1e8a:	66 1f       	adc	r22, r22
    1e8c:	82 9f       	mul	r24, r18
    1e8e:	22 27       	eor	r18, r18
    1e90:	b0 0d       	add	r27, r0
    1e92:	a1 1d       	adc	r26, r1
    1e94:	62 1f       	adc	r22, r18
    1e96:	73 9f       	mul	r23, r19
    1e98:	b0 0d       	add	r27, r0
    1e9a:	a1 1d       	adc	r26, r1
    1e9c:	62 1f       	adc	r22, r18
    1e9e:	83 9f       	mul	r24, r19
    1ea0:	a0 0d       	add	r26, r0
    1ea2:	61 1d       	adc	r22, r1
    1ea4:	22 1f       	adc	r18, r18
    1ea6:	74 9f       	mul	r23, r20
    1ea8:	33 27       	eor	r19, r19
    1eaa:	a0 0d       	add	r26, r0
    1eac:	61 1d       	adc	r22, r1
    1eae:	23 1f       	adc	r18, r19
    1eb0:	84 9f       	mul	r24, r20
    1eb2:	60 0d       	add	r22, r0
    1eb4:	21 1d       	adc	r18, r1
    1eb6:	82 2f       	mov	r24, r18
    1eb8:	76 2f       	mov	r23, r22
    1eba:	6a 2f       	mov	r22, r26
    1ebc:	11 24       	eor	r1, r1
    1ebe:	9f 57       	subi	r25, 0x7F	; 127
    1ec0:	50 40       	sbci	r21, 0x00	; 0
    1ec2:	9a f0       	brmi	.+38     	; 0x1eea <__mulsf3_pse+0x88>
    1ec4:	f1 f0       	breq	.+60     	; 0x1f02 <__mulsf3_pse+0xa0>
    1ec6:	88 23       	and	r24, r24
    1ec8:	4a f0       	brmi	.+18     	; 0x1edc <__mulsf3_pse+0x7a>
    1eca:	ee 0f       	add	r30, r30
    1ecc:	ff 1f       	adc	r31, r31
    1ece:	bb 1f       	adc	r27, r27
    1ed0:	66 1f       	adc	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	91 50       	subi	r25, 0x01	; 1
    1ed8:	50 40       	sbci	r21, 0x00	; 0
    1eda:	a9 f7       	brne	.-22     	; 0x1ec6 <__mulsf3_pse+0x64>
    1edc:	9e 3f       	cpi	r25, 0xFE	; 254
    1ede:	51 05       	cpc	r21, r1
    1ee0:	80 f0       	brcs	.+32     	; 0x1f02 <__mulsf3_pse+0xa0>
    1ee2:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    1ee6:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>
    1eea:	5f 3f       	cpi	r21, 0xFF	; 255
    1eec:	e4 f3       	brlt	.-8      	; 0x1ee6 <__mulsf3_pse+0x84>
    1eee:	98 3e       	cpi	r25, 0xE8	; 232
    1ef0:	d4 f3       	brlt	.-12     	; 0x1ee6 <__mulsf3_pse+0x84>
    1ef2:	86 95       	lsr	r24
    1ef4:	77 95       	ror	r23
    1ef6:	67 95       	ror	r22
    1ef8:	b7 95       	ror	r27
    1efa:	f7 95       	ror	r31
    1efc:	e7 95       	ror	r30
    1efe:	9f 5f       	subi	r25, 0xFF	; 255
    1f00:	c1 f7       	brne	.-16     	; 0x1ef2 <__mulsf3_pse+0x90>
    1f02:	fe 2b       	or	r31, r30
    1f04:	88 0f       	add	r24, r24
    1f06:	91 1d       	adc	r25, r1
    1f08:	96 95       	lsr	r25
    1f0a:	87 95       	ror	r24
    1f0c:	97 f9       	bld	r25, 7
    1f0e:	08 95       	ret

00001f10 <pow>:
    1f10:	fa 01       	movw	r30, r20
    1f12:	ee 0f       	add	r30, r30
    1f14:	ff 1f       	adc	r31, r31
    1f16:	30 96       	adiw	r30, 0x00	; 0
    1f18:	21 05       	cpc	r18, r1
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	a1 f1       	breq	.+104    	; 0x1f86 <pow+0x76>
    1f1e:	61 15       	cp	r22, r1
    1f20:	71 05       	cpc	r23, r1
    1f22:	61 f4       	brne	.+24     	; 0x1f3c <pow+0x2c>
    1f24:	80 38       	cpi	r24, 0x80	; 128
    1f26:	bf e3       	ldi	r27, 0x3F	; 63
    1f28:	9b 07       	cpc	r25, r27
    1f2a:	49 f1       	breq	.+82     	; 0x1f7e <pow+0x6e>
    1f2c:	68 94       	set
    1f2e:	90 38       	cpi	r25, 0x80	; 128
    1f30:	81 05       	cpc	r24, r1
    1f32:	61 f0       	breq	.+24     	; 0x1f4c <pow+0x3c>
    1f34:	80 38       	cpi	r24, 0x80	; 128
    1f36:	bf ef       	ldi	r27, 0xFF	; 255
    1f38:	9b 07       	cpc	r25, r27
    1f3a:	41 f0       	breq	.+16     	; 0x1f4c <pow+0x3c>
    1f3c:	99 23       	and	r25, r25
    1f3e:	4a f5       	brpl	.+82     	; 0x1f92 <pow+0x82>
    1f40:	ff 3f       	cpi	r31, 0xFF	; 255
    1f42:	e1 05       	cpc	r30, r1
    1f44:	31 05       	cpc	r19, r1
    1f46:	21 05       	cpc	r18, r1
    1f48:	19 f1       	breq	.+70     	; 0x1f90 <pow+0x80>
    1f4a:	e8 94       	clt
    1f4c:	08 94       	sec
    1f4e:	e7 95       	ror	r30
    1f50:	d9 01       	movw	r26, r18
    1f52:	aa 23       	and	r26, r26
    1f54:	29 f4       	brne	.+10     	; 0x1f60 <pow+0x50>
    1f56:	ab 2f       	mov	r26, r27
    1f58:	be 2f       	mov	r27, r30
    1f5a:	f8 5f       	subi	r31, 0xF8	; 248
    1f5c:	d0 f3       	brcs	.-12     	; 0x1f52 <pow+0x42>
    1f5e:	10 c0       	rjmp	.+32     	; 0x1f80 <pow+0x70>
    1f60:	ff 5f       	subi	r31, 0xFF	; 255
    1f62:	70 f4       	brcc	.+28     	; 0x1f80 <pow+0x70>
    1f64:	a6 95       	lsr	r26
    1f66:	e0 f7       	brcc	.-8      	; 0x1f60 <pow+0x50>
    1f68:	f7 39       	cpi	r31, 0x97	; 151
    1f6a:	50 f0       	brcs	.+20     	; 0x1f80 <pow+0x70>
    1f6c:	19 f0       	breq	.+6      	; 0x1f74 <pow+0x64>
    1f6e:	ff 3a       	cpi	r31, 0xAF	; 175
    1f70:	38 f4       	brcc	.+14     	; 0x1f80 <pow+0x70>
    1f72:	9f 77       	andi	r25, 0x7F	; 127
    1f74:	9f 93       	push	r25
    1f76:	0d d0       	rcall	.+26     	; 0x1f92 <pow+0x82>
    1f78:	0f 90       	pop	r0
    1f7a:	07 fc       	sbrc	r0, 7
    1f7c:	90 58       	subi	r25, 0x80	; 128
    1f7e:	08 95       	ret
    1f80:	46 f0       	brts	.+16     	; 0x1f92 <pow+0x82>
    1f82:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_nan>
    1f86:	60 e0       	ldi	r22, 0x00	; 0
    1f88:	70 e0       	ldi	r23, 0x00	; 0
    1f8a:	80 e8       	ldi	r24, 0x80	; 128
    1f8c:	9f e3       	ldi	r25, 0x3F	; 63
    1f8e:	08 95       	ret
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	9f 77       	andi	r25, 0x7F	; 127
    1f94:	5f 93       	push	r21
    1f96:	4f 93       	push	r20
    1f98:	3f 93       	push	r19
    1f9a:	2f 93       	push	r18
    1f9c:	0e 94 c8 10 	call	0x2190	; 0x2190 <log>
    1fa0:	2f 91       	pop	r18
    1fa2:	3f 91       	pop	r19
    1fa4:	4f 91       	pop	r20
    1fa6:	5f 91       	pop	r21
    1fa8:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    1fac:	0c 94 15 10 	jmp	0x202a	; 0x202a <exp>

00001fb0 <round>:
    1fb0:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_splitA>
    1fb4:	e8 f0       	brcs	.+58     	; 0x1ff0 <round+0x40>
    1fb6:	9e 37       	cpi	r25, 0x7E	; 126
    1fb8:	e8 f0       	brcs	.+58     	; 0x1ff4 <round+0x44>
    1fba:	96 39       	cpi	r25, 0x96	; 150
    1fbc:	b8 f4       	brcc	.+46     	; 0x1fec <round+0x3c>
    1fbe:	9e 38       	cpi	r25, 0x8E	; 142
    1fc0:	48 f4       	brcc	.+18     	; 0x1fd4 <round+0x24>
    1fc2:	67 2f       	mov	r22, r23
    1fc4:	78 2f       	mov	r23, r24
    1fc6:	88 27       	eor	r24, r24
    1fc8:	98 5f       	subi	r25, 0xF8	; 248
    1fca:	f9 cf       	rjmp	.-14     	; 0x1fbe <round+0xe>
    1fcc:	86 95       	lsr	r24
    1fce:	77 95       	ror	r23
    1fd0:	67 95       	ror	r22
    1fd2:	93 95       	inc	r25
    1fd4:	95 39       	cpi	r25, 0x95	; 149
    1fd6:	d0 f3       	brcs	.-12     	; 0x1fcc <round+0x1c>
    1fd8:	b6 2f       	mov	r27, r22
    1fda:	b1 70       	andi	r27, 0x01	; 1
    1fdc:	6b 0f       	add	r22, r27
    1fde:	71 1d       	adc	r23, r1
    1fe0:	81 1d       	adc	r24, r1
    1fe2:	20 f4       	brcc	.+8      	; 0x1fec <round+0x3c>
    1fe4:	87 95       	ror	r24
    1fe6:	77 95       	ror	r23
    1fe8:	67 95       	ror	r22
    1fea:	93 95       	inc	r25
    1fec:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__fp_mintl>
    1ff0:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__fp_mpack>
    1ff4:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>

00001ff8 <sin>:
    1ff8:	9f 93       	push	r25
    1ffa:	0e 94 49 10 	call	0x2092	; 0x2092 <__fp_rempio2>
    1ffe:	0f 90       	pop	r0
    2000:	07 fc       	sbrc	r0, 7
    2002:	ee 5f       	subi	r30, 0xFE	; 254
    2004:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__fp_sinus>

00002008 <square>:
    2008:	9b 01       	movw	r18, r22
    200a:	ac 01       	movw	r20, r24
    200c:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__mulsf3>

00002010 <__unordsf2>:
    2010:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <__fp_cmp>
    2014:	88 0b       	sbc	r24, r24
    2016:	99 0b       	sbc	r25, r25
    2018:	08 95       	ret
    201a:	29 f4       	brne	.+10     	; 0x2026 <__unordsf2+0x16>
    201c:	16 f0       	brts	.+4      	; 0x2022 <__unordsf2+0x12>
    201e:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    2022:	0c 94 07 0f 	jmp	0x1e0e	; 0x1e0e <__fp_zero>
    2026:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_nan>

0000202a <exp>:
    202a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_splitA>
    202e:	a8 f3       	brcs	.-22     	; 0x201a <__unordsf2+0xa>
    2030:	96 38       	cpi	r25, 0x86	; 134
    2032:	a0 f7       	brcc	.-24     	; 0x201c <__unordsf2+0xc>
    2034:	07 f8       	bld	r0, 7
    2036:	0f 92       	push	r0
    2038:	e8 94       	clt
    203a:	2b e3       	ldi	r18, 0x3B	; 59
    203c:	3a ea       	ldi	r19, 0xAA	; 170
    203e:	48 eb       	ldi	r20, 0xB8	; 184
    2040:	5f e7       	ldi	r21, 0x7F	; 127
    2042:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <__mulsf3_pse>
    2046:	0f 92       	push	r0
    2048:	0f 92       	push	r0
    204a:	0f 92       	push	r0
    204c:	4d b7       	in	r20, 0x3d	; 61
    204e:	5e b7       	in	r21, 0x3e	; 62
    2050:	0f 92       	push	r0
    2052:	0e 94 10 11 	call	0x2220	; 0x2220 <modf>
    2056:	e5 e9       	ldi	r30, 0x95	; 149
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_powser>
    205e:	4f 91       	pop	r20
    2060:	5f 91       	pop	r21
    2062:	ef 91       	pop	r30
    2064:	ff 91       	pop	r31
    2066:	e5 95       	asr	r30
    2068:	ee 1f       	adc	r30, r30
    206a:	ff 1f       	adc	r31, r31
    206c:	49 f0       	breq	.+18     	; 0x2080 <exp+0x56>
    206e:	fe 57       	subi	r31, 0x7E	; 126
    2070:	e0 68       	ori	r30, 0x80	; 128
    2072:	44 27       	eor	r20, r20
    2074:	ee 0f       	add	r30, r30
    2076:	44 1f       	adc	r20, r20
    2078:	fa 95       	dec	r31
    207a:	e1 f7       	brne	.-8      	; 0x2074 <exp+0x4a>
    207c:	41 95       	neg	r20
    207e:	55 0b       	sbc	r21, r21
    2080:	0e 94 8a 10 	call	0x2114	; 0x2114 <ldexp>
    2084:	0f 90       	pop	r0
    2086:	07 fe       	sbrs	r0, 7
    2088:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <inverse>
    208c:	08 95       	ret
    208e:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_nan>

00002092 <__fp_rempio2>:
    2092:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_splitA>
    2096:	d8 f3       	brcs	.-10     	; 0x208e <exp+0x64>
    2098:	e8 94       	clt
    209a:	e0 e0       	ldi	r30, 0x00	; 0
    209c:	bb 27       	eor	r27, r27
    209e:	9f 57       	subi	r25, 0x7F	; 127
    20a0:	f0 f0       	brcs	.+60     	; 0x20de <__fp_rempio2+0x4c>
    20a2:	2a ed       	ldi	r18, 0xDA	; 218
    20a4:	3f e0       	ldi	r19, 0x0F	; 15
    20a6:	49 ec       	ldi	r20, 0xC9	; 201
    20a8:	06 c0       	rjmp	.+12     	; 0x20b6 <__fp_rempio2+0x24>
    20aa:	ee 0f       	add	r30, r30
    20ac:	bb 0f       	add	r27, r27
    20ae:	66 1f       	adc	r22, r22
    20b0:	77 1f       	adc	r23, r23
    20b2:	88 1f       	adc	r24, r24
    20b4:	28 f0       	brcs	.+10     	; 0x20c0 <__fp_rempio2+0x2e>
    20b6:	b2 3a       	cpi	r27, 0xA2	; 162
    20b8:	62 07       	cpc	r22, r18
    20ba:	73 07       	cpc	r23, r19
    20bc:	84 07       	cpc	r24, r20
    20be:	28 f0       	brcs	.+10     	; 0x20ca <__fp_rempio2+0x38>
    20c0:	b2 5a       	subi	r27, 0xA2	; 162
    20c2:	62 0b       	sbc	r22, r18
    20c4:	73 0b       	sbc	r23, r19
    20c6:	84 0b       	sbc	r24, r20
    20c8:	e3 95       	inc	r30
    20ca:	9a 95       	dec	r25
    20cc:	72 f7       	brpl	.-36     	; 0x20aa <__fp_rempio2+0x18>
    20ce:	80 38       	cpi	r24, 0x80	; 128
    20d0:	30 f4       	brcc	.+12     	; 0x20de <__fp_rempio2+0x4c>
    20d2:	9a 95       	dec	r25
    20d4:	bb 0f       	add	r27, r27
    20d6:	66 1f       	adc	r22, r22
    20d8:	77 1f       	adc	r23, r23
    20da:	88 1f       	adc	r24, r24
    20dc:	d2 f7       	brpl	.-12     	; 0x20d2 <__fp_rempio2+0x40>
    20de:	90 48       	sbci	r25, 0x80	; 128
    20e0:	0c 94 78 0e 	jmp	0x1cf0	; 0x1cf0 <__fp_mpack_finite>

000020e4 <__fp_sinus>:
    20e4:	ef 93       	push	r30
    20e6:	e0 ff       	sbrs	r30, 0
    20e8:	07 c0       	rjmp	.+14     	; 0x20f8 <__fp_sinus+0x14>
    20ea:	a2 ea       	ldi	r26, 0xA2	; 162
    20ec:	2a ed       	ldi	r18, 0xDA	; 218
    20ee:	3f e0       	ldi	r19, 0x0F	; 15
    20f0:	49 ec       	ldi	r20, 0xC9	; 201
    20f2:	5f eb       	ldi	r21, 0xBF	; 191
    20f4:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__addsf3x>
    20f8:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <__fp_round>
    20fc:	0f 90       	pop	r0
    20fe:	03 94       	inc	r0
    2100:	01 fc       	sbrc	r0, 1
    2102:	90 58       	subi	r25, 0x80	; 128
    2104:	ed eb       	ldi	r30, 0xBD	; 189
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	0c 94 44 11 	jmp	0x2288	; 0x2288 <__fp_powsodd>
    210c:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>
    2110:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__fp_mpack>

00002114 <ldexp>:
    2114:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_splitA>
    2118:	d8 f3       	brcs	.-10     	; 0x2110 <__fp_sinus+0x2c>
    211a:	99 23       	and	r25, r25
    211c:	c9 f3       	breq	.-14     	; 0x2110 <__fp_sinus+0x2c>
    211e:	94 0f       	add	r25, r20
    2120:	51 1d       	adc	r21, r1
    2122:	a3 f3       	brvs	.-24     	; 0x210c <__fp_sinus+0x28>
    2124:	91 50       	subi	r25, 0x01	; 1
    2126:	50 40       	sbci	r21, 0x00	; 0
    2128:	94 f0       	brlt	.+36     	; 0x214e <ldexp+0x3a>
    212a:	59 f0       	breq	.+22     	; 0x2142 <ldexp+0x2e>
    212c:	88 23       	and	r24, r24
    212e:	32 f0       	brmi	.+12     	; 0x213c <ldexp+0x28>
    2130:	66 0f       	add	r22, r22
    2132:	77 1f       	adc	r23, r23
    2134:	88 1f       	adc	r24, r24
    2136:	91 50       	subi	r25, 0x01	; 1
    2138:	50 40       	sbci	r21, 0x00	; 0
    213a:	c1 f7       	brne	.-16     	; 0x212c <ldexp+0x18>
    213c:	9e 3f       	cpi	r25, 0xFE	; 254
    213e:	51 05       	cpc	r21, r1
    2140:	2c f7       	brge	.-54     	; 0x210c <__fp_sinus+0x28>
    2142:	88 0f       	add	r24, r24
    2144:	91 1d       	adc	r25, r1
    2146:	96 95       	lsr	r25
    2148:	87 95       	ror	r24
    214a:	97 f9       	bld	r25, 7
    214c:	08 95       	ret
    214e:	5f 3f       	cpi	r21, 0xFF	; 255
    2150:	ac f0       	brlt	.+42     	; 0x217c <ldexp+0x68>
    2152:	98 3e       	cpi	r25, 0xE8	; 232
    2154:	9c f0       	brlt	.+38     	; 0x217c <ldexp+0x68>
    2156:	bb 27       	eor	r27, r27
    2158:	86 95       	lsr	r24
    215a:	77 95       	ror	r23
    215c:	67 95       	ror	r22
    215e:	b7 95       	ror	r27
    2160:	08 f4       	brcc	.+2      	; 0x2164 <ldexp+0x50>
    2162:	b1 60       	ori	r27, 0x01	; 1
    2164:	93 95       	inc	r25
    2166:	c1 f7       	brne	.-16     	; 0x2158 <ldexp+0x44>
    2168:	bb 0f       	add	r27, r27
    216a:	58 f7       	brcc	.-42     	; 0x2142 <ldexp+0x2e>
    216c:	11 f4       	brne	.+4      	; 0x2172 <ldexp+0x5e>
    216e:	60 ff       	sbrs	r22, 0
    2170:	e8 cf       	rjmp	.-48     	; 0x2142 <ldexp+0x2e>
    2172:	6f 5f       	subi	r22, 0xFF	; 255
    2174:	7f 4f       	sbci	r23, 0xFF	; 255
    2176:	8f 4f       	sbci	r24, 0xFF	; 255
    2178:	9f 4f       	sbci	r25, 0xFF	; 255
    217a:	e3 cf       	rjmp	.-58     	; 0x2142 <ldexp+0x2e>
    217c:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__fp_szero>
    2180:	16 f0       	brts	.+4      	; 0x2186 <ldexp+0x72>
    2182:	0c 94 76 0e 	jmp	0x1cec	; 0x1cec <__fp_mpack>
    2186:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_nan>
    218a:	68 94       	set
    218c:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__fp_inf>

00002190 <log>:
    2190:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__fp_splitA>
    2194:	a8 f3       	brcs	.-22     	; 0x2180 <ldexp+0x6c>
    2196:	99 23       	and	r25, r25
    2198:	c1 f3       	breq	.-16     	; 0x218a <ldexp+0x76>
    219a:	ae f3       	brts	.-22     	; 0x2186 <ldexp+0x72>
    219c:	df 93       	push	r29
    219e:	cf 93       	push	r28
    21a0:	1f 93       	push	r17
    21a2:	0f 93       	push	r16
    21a4:	ff 92       	push	r15
    21a6:	c9 2f       	mov	r28, r25
    21a8:	dd 27       	eor	r29, r29
    21aa:	88 23       	and	r24, r24
    21ac:	2a f0       	brmi	.+10     	; 0x21b8 <log+0x28>
    21ae:	21 97       	sbiw	r28, 0x01	; 1
    21b0:	66 0f       	add	r22, r22
    21b2:	77 1f       	adc	r23, r23
    21b4:	88 1f       	adc	r24, r24
    21b6:	da f7       	brpl	.-10     	; 0x21ae <log+0x1e>
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e8       	ldi	r20, 0x80	; 128
    21be:	5f eb       	ldi	r21, 0xBF	; 191
    21c0:	9f e3       	ldi	r25, 0x3F	; 63
    21c2:	88 39       	cpi	r24, 0x98	; 152
    21c4:	20 f0       	brcs	.+8      	; 0x21ce <log+0x3e>
    21c6:	80 3e       	cpi	r24, 0xE0	; 224
    21c8:	38 f0       	brcs	.+14     	; 0x21d8 <log+0x48>
    21ca:	21 96       	adiw	r28, 0x01	; 1
    21cc:	8f 77       	andi	r24, 0x7F	; 127
    21ce:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
    21d2:	eb ed       	ldi	r30, 0xDB	; 219
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <log+0x50>
    21d8:	0e 94 95 0c 	call	0x192a	; 0x192a <__addsf3>
    21dc:	e8 e0       	ldi	r30, 0x08	; 8
    21de:	f1 e0       	ldi	r31, 0x01	; 1
    21e0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_powser>
    21e4:	8b 01       	movw	r16, r22
    21e6:	be 01       	movw	r22, r28
    21e8:	ec 01       	movw	r28, r24
    21ea:	fb 2e       	mov	r15, r27
    21ec:	6f 57       	subi	r22, 0x7F	; 127
    21ee:	71 09       	sbc	r23, r1
    21f0:	75 95       	asr	r23
    21f2:	77 1f       	adc	r23, r23
    21f4:	88 0b       	sbc	r24, r24
    21f6:	99 0b       	sbc	r25, r25
    21f8:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <__floatsisf>
    21fc:	28 e1       	ldi	r18, 0x18	; 24
    21fe:	32 e7       	ldi	r19, 0x72	; 114
    2200:	41 e3       	ldi	r20, 0x31	; 49
    2202:	5f e3       	ldi	r21, 0x3F	; 63
    2204:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <__mulsf3x>
    2208:	af 2d       	mov	r26, r15
    220a:	98 01       	movw	r18, r16
    220c:	ae 01       	movw	r20, r28
    220e:	ff 90       	pop	r15
    2210:	0f 91       	pop	r16
    2212:	1f 91       	pop	r17
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	0e 94 ac 0c 	call	0x1958	; 0x1958 <__addsf3x>
    221c:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__fp_round>

00002220 <modf>:
    2220:	fa 01       	movw	r30, r20
    2222:	dc 01       	movw	r26, r24
    2224:	aa 0f       	add	r26, r26
    2226:	bb 1f       	adc	r27, r27
    2228:	9b 01       	movw	r18, r22
    222a:	ac 01       	movw	r20, r24
    222c:	bf 57       	subi	r27, 0x7F	; 127
    222e:	28 f4       	brcc	.+10     	; 0x223a <modf+0x1a>
    2230:	22 27       	eor	r18, r18
    2232:	33 27       	eor	r19, r19
    2234:	44 27       	eor	r20, r20
    2236:	50 78       	andi	r21, 0x80	; 128
    2238:	20 c0       	rjmp	.+64     	; 0x227a <modf+0x5a>
    223a:	b7 51       	subi	r27, 0x17	; 23
    223c:	90 f4       	brcc	.+36     	; 0x2262 <modf+0x42>
    223e:	ab 2f       	mov	r26, r27
    2240:	00 24       	eor	r0, r0
    2242:	46 95       	lsr	r20
    2244:	37 95       	ror	r19
    2246:	27 95       	ror	r18
    2248:	01 1c       	adc	r0, r1
    224a:	a3 95       	inc	r26
    224c:	d2 f3       	brmi	.-12     	; 0x2242 <modf+0x22>
    224e:	00 20       	and	r0, r0
    2250:	71 f0       	breq	.+28     	; 0x226e <modf+0x4e>
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	44 1f       	adc	r20, r20
    2258:	b3 95       	inc	r27
    225a:	da f3       	brmi	.-10     	; 0x2252 <modf+0x32>
    225c:	0e d0       	rcall	.+28     	; 0x227a <modf+0x5a>
    225e:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <__subsf3>
    2262:	61 30       	cpi	r22, 0x01	; 1
    2264:	71 05       	cpc	r23, r1
    2266:	a0 e8       	ldi	r26, 0x80	; 128
    2268:	8a 07       	cpc	r24, r26
    226a:	b9 46       	sbci	r27, 0x69	; 105
    226c:	30 f4       	brcc	.+12     	; 0x227a <modf+0x5a>
    226e:	9b 01       	movw	r18, r22
    2270:	ac 01       	movw	r20, r24
    2272:	66 27       	eor	r22, r22
    2274:	77 27       	eor	r23, r23
    2276:	88 27       	eor	r24, r24
    2278:	90 78       	andi	r25, 0x80	; 128
    227a:	30 96       	adiw	r30, 0x00	; 0
    227c:	21 f0       	breq	.+8      	; 0x2286 <modf+0x66>
    227e:	20 83       	st	Z, r18
    2280:	31 83       	std	Z+1, r19	; 0x01
    2282:	42 83       	std	Z+2, r20	; 0x02
    2284:	53 83       	std	Z+3, r21	; 0x03
    2286:	08 95       	ret

00002288 <__fp_powsodd>:
    2288:	9f 93       	push	r25
    228a:	8f 93       	push	r24
    228c:	7f 93       	push	r23
    228e:	6f 93       	push	r22
    2290:	ff 93       	push	r31
    2292:	ef 93       	push	r30
    2294:	9b 01       	movw	r18, r22
    2296:	ac 01       	movw	r20, r24
    2298:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <__mulsf3>
    229c:	ef 91       	pop	r30
    229e:	ff 91       	pop	r31
    22a0:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <__fp_powser>
    22a4:	2f 91       	pop	r18
    22a6:	3f 91       	pop	r19
    22a8:	4f 91       	pop	r20
    22aa:	5f 91       	pop	r21
    22ac:	0c 94 1b 0f 	jmp	0x1e36	; 0x1e36 <__mulsf3>

000022b0 <__divmodhi4>:
    22b0:	97 fb       	bst	r25, 7
    22b2:	07 2e       	mov	r0, r23
    22b4:	16 f4       	brtc	.+4      	; 0x22ba <__divmodhi4+0xa>
    22b6:	00 94       	com	r0
    22b8:	07 d0       	rcall	.+14     	; 0x22c8 <__divmodhi4_neg1>
    22ba:	77 fd       	sbrc	r23, 7
    22bc:	09 d0       	rcall	.+18     	; 0x22d0 <__divmodhi4_neg2>
    22be:	0e 94 8e 11 	call	0x231c	; 0x231c <__udivmodhi4>
    22c2:	07 fc       	sbrc	r0, 7
    22c4:	05 d0       	rcall	.+10     	; 0x22d0 <__divmodhi4_neg2>
    22c6:	3e f4       	brtc	.+14     	; 0x22d6 <__divmodhi4_exit>

000022c8 <__divmodhi4_neg1>:
    22c8:	90 95       	com	r25
    22ca:	81 95       	neg	r24
    22cc:	9f 4f       	sbci	r25, 0xFF	; 255
    22ce:	08 95       	ret

000022d0 <__divmodhi4_neg2>:
    22d0:	70 95       	com	r23
    22d2:	61 95       	neg	r22
    22d4:	7f 4f       	sbci	r23, 0xFF	; 255

000022d6 <__divmodhi4_exit>:
    22d6:	08 95       	ret

000022d8 <__udivmodsi4>:
    22d8:	a1 e2       	ldi	r26, 0x21	; 33
    22da:	1a 2e       	mov	r1, r26
    22dc:	aa 1b       	sub	r26, r26
    22de:	bb 1b       	sub	r27, r27
    22e0:	fd 01       	movw	r30, r26
    22e2:	0d c0       	rjmp	.+26     	; 0x22fe <__udivmodsi4_ep>

000022e4 <__udivmodsi4_loop>:
    22e4:	aa 1f       	adc	r26, r26
    22e6:	bb 1f       	adc	r27, r27
    22e8:	ee 1f       	adc	r30, r30
    22ea:	ff 1f       	adc	r31, r31
    22ec:	a2 17       	cp	r26, r18
    22ee:	b3 07       	cpc	r27, r19
    22f0:	e4 07       	cpc	r30, r20
    22f2:	f5 07       	cpc	r31, r21
    22f4:	20 f0       	brcs	.+8      	; 0x22fe <__udivmodsi4_ep>
    22f6:	a2 1b       	sub	r26, r18
    22f8:	b3 0b       	sbc	r27, r19
    22fa:	e4 0b       	sbc	r30, r20
    22fc:	f5 0b       	sbc	r31, r21

000022fe <__udivmodsi4_ep>:
    22fe:	66 1f       	adc	r22, r22
    2300:	77 1f       	adc	r23, r23
    2302:	88 1f       	adc	r24, r24
    2304:	99 1f       	adc	r25, r25
    2306:	1a 94       	dec	r1
    2308:	69 f7       	brne	.-38     	; 0x22e4 <__udivmodsi4_loop>
    230a:	60 95       	com	r22
    230c:	70 95       	com	r23
    230e:	80 95       	com	r24
    2310:	90 95       	com	r25
    2312:	9b 01       	movw	r18, r22
    2314:	ac 01       	movw	r20, r24
    2316:	bd 01       	movw	r22, r26
    2318:	cf 01       	movw	r24, r30
    231a:	08 95       	ret

0000231c <__udivmodhi4>:
    231c:	aa 1b       	sub	r26, r26
    231e:	bb 1b       	sub	r27, r27
    2320:	51 e1       	ldi	r21, 0x11	; 17
    2322:	07 c0       	rjmp	.+14     	; 0x2332 <__udivmodhi4_ep>

00002324 <__udivmodhi4_loop>:
    2324:	aa 1f       	adc	r26, r26
    2326:	bb 1f       	adc	r27, r27
    2328:	a6 17       	cp	r26, r22
    232a:	b7 07       	cpc	r27, r23
    232c:	10 f0       	brcs	.+4      	; 0x2332 <__udivmodhi4_ep>
    232e:	a6 1b       	sub	r26, r22
    2330:	b7 0b       	sbc	r27, r23

00002332 <__udivmodhi4_ep>:
    2332:	88 1f       	adc	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	5a 95       	dec	r21
    2338:	a9 f7       	brne	.-22     	; 0x2324 <__udivmodhi4_loop>
    233a:	80 95       	com	r24
    233c:	90 95       	com	r25
    233e:	bc 01       	movw	r22, r24
    2340:	cd 01       	movw	r24, r26
    2342:	08 95       	ret

00002344 <printf>:
    2344:	a0 e0       	ldi	r26, 0x00	; 0
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 ea       	ldi	r30, 0xA8	; 168
    234a:	f1 e1       	ldi	r31, 0x11	; 17
    234c:	0c 94 88 14 	jmp	0x2910	; 0x2910 <__prologue_saves__+0x20>
    2350:	ae 01       	movw	r20, r28
    2352:	4b 5f       	subi	r20, 0xFB	; 251
    2354:	5f 4f       	sbci	r21, 0xFF	; 255
    2356:	fa 01       	movw	r30, r20
    2358:	61 91       	ld	r22, Z+
    235a:	71 91       	ld	r23, Z+
    235c:	af 01       	movw	r20, r30
    235e:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <__iob+0x2>
    2362:	90 91 16 02 	lds	r25, 0x0216	; 0x800216 <__iob+0x3>
    2366:	0e 94 bf 11 	call	0x237e	; 0x237e <vfprintf>
    236a:	e2 e0       	ldi	r30, 0x02	; 2
    236c:	0c 94 a4 14 	jmp	0x2948	; 0x2948 <__epilogue_restores__+0x20>

00002370 <putchar>:
    2370:	60 91 15 02 	lds	r22, 0x0215	; 0x800215 <__iob+0x2>
    2374:	70 91 16 02 	lds	r23, 0x0216	; 0x800216 <__iob+0x3>
    2378:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    237c:	08 95       	ret

0000237e <vfprintf>:
    237e:	ab e0       	ldi	r26, 0x0B	; 11
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 ec       	ldi	r30, 0xC5	; 197
    2384:	f1 e1       	ldi	r31, 0x11	; 17
    2386:	0c 94 78 14 	jmp	0x28f0	; 0x28f0 <__prologue_saves__>
    238a:	6c 01       	movw	r12, r24
    238c:	7b 01       	movw	r14, r22
    238e:	8a 01       	movw	r16, r20
    2390:	fc 01       	movw	r30, r24
    2392:	17 82       	std	Z+7, r1	; 0x07
    2394:	16 82       	std	Z+6, r1	; 0x06
    2396:	83 81       	ldd	r24, Z+3	; 0x03
    2398:	81 ff       	sbrs	r24, 1
    239a:	cc c1       	rjmp	.+920    	; 0x2734 <vfprintf+0x3b6>
    239c:	ce 01       	movw	r24, r28
    239e:	01 96       	adiw	r24, 0x01	; 1
    23a0:	3c 01       	movw	r6, r24
    23a2:	f6 01       	movw	r30, r12
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	f7 01       	movw	r30, r14
    23a8:	93 fd       	sbrc	r25, 3
    23aa:	85 91       	lpm	r24, Z+
    23ac:	93 ff       	sbrs	r25, 3
    23ae:	81 91       	ld	r24, Z+
    23b0:	7f 01       	movw	r14, r30
    23b2:	88 23       	and	r24, r24
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <vfprintf+0x3a>
    23b6:	ba c1       	rjmp	.+884    	; 0x272c <vfprintf+0x3ae>
    23b8:	85 32       	cpi	r24, 0x25	; 37
    23ba:	39 f4       	brne	.+14     	; 0x23ca <vfprintf+0x4c>
    23bc:	93 fd       	sbrc	r25, 3
    23be:	85 91       	lpm	r24, Z+
    23c0:	93 ff       	sbrs	r25, 3
    23c2:	81 91       	ld	r24, Z+
    23c4:	7f 01       	movw	r14, r30
    23c6:	85 32       	cpi	r24, 0x25	; 37
    23c8:	29 f4       	brne	.+10     	; 0x23d4 <vfprintf+0x56>
    23ca:	b6 01       	movw	r22, r12
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    23d2:	e7 cf       	rjmp	.-50     	; 0x23a2 <vfprintf+0x24>
    23d4:	91 2c       	mov	r9, r1
    23d6:	21 2c       	mov	r2, r1
    23d8:	31 2c       	mov	r3, r1
    23da:	ff e1       	ldi	r31, 0x1F	; 31
    23dc:	f3 15       	cp	r31, r3
    23de:	d8 f0       	brcs	.+54     	; 0x2416 <vfprintf+0x98>
    23e0:	8b 32       	cpi	r24, 0x2B	; 43
    23e2:	79 f0       	breq	.+30     	; 0x2402 <vfprintf+0x84>
    23e4:	38 f4       	brcc	.+14     	; 0x23f4 <vfprintf+0x76>
    23e6:	80 32       	cpi	r24, 0x20	; 32
    23e8:	79 f0       	breq	.+30     	; 0x2408 <vfprintf+0x8a>
    23ea:	83 32       	cpi	r24, 0x23	; 35
    23ec:	a1 f4       	brne	.+40     	; 0x2416 <vfprintf+0x98>
    23ee:	23 2d       	mov	r18, r3
    23f0:	20 61       	ori	r18, 0x10	; 16
    23f2:	1d c0       	rjmp	.+58     	; 0x242e <vfprintf+0xb0>
    23f4:	8d 32       	cpi	r24, 0x2D	; 45
    23f6:	61 f0       	breq	.+24     	; 0x2410 <vfprintf+0x92>
    23f8:	80 33       	cpi	r24, 0x30	; 48
    23fa:	69 f4       	brne	.+26     	; 0x2416 <vfprintf+0x98>
    23fc:	23 2d       	mov	r18, r3
    23fe:	21 60       	ori	r18, 0x01	; 1
    2400:	16 c0       	rjmp	.+44     	; 0x242e <vfprintf+0xb0>
    2402:	83 2d       	mov	r24, r3
    2404:	82 60       	ori	r24, 0x02	; 2
    2406:	38 2e       	mov	r3, r24
    2408:	e3 2d       	mov	r30, r3
    240a:	e4 60       	ori	r30, 0x04	; 4
    240c:	3e 2e       	mov	r3, r30
    240e:	2a c0       	rjmp	.+84     	; 0x2464 <vfprintf+0xe6>
    2410:	f3 2d       	mov	r31, r3
    2412:	f8 60       	ori	r31, 0x08	; 8
    2414:	1d c0       	rjmp	.+58     	; 0x2450 <vfprintf+0xd2>
    2416:	37 fc       	sbrc	r3, 7
    2418:	2d c0       	rjmp	.+90     	; 0x2474 <vfprintf+0xf6>
    241a:	20 ed       	ldi	r18, 0xD0	; 208
    241c:	28 0f       	add	r18, r24
    241e:	2a 30       	cpi	r18, 0x0A	; 10
    2420:	40 f0       	brcs	.+16     	; 0x2432 <vfprintf+0xb4>
    2422:	8e 32       	cpi	r24, 0x2E	; 46
    2424:	b9 f4       	brne	.+46     	; 0x2454 <vfprintf+0xd6>
    2426:	36 fc       	sbrc	r3, 6
    2428:	81 c1       	rjmp	.+770    	; 0x272c <vfprintf+0x3ae>
    242a:	23 2d       	mov	r18, r3
    242c:	20 64       	ori	r18, 0x40	; 64
    242e:	32 2e       	mov	r3, r18
    2430:	19 c0       	rjmp	.+50     	; 0x2464 <vfprintf+0xe6>
    2432:	36 fe       	sbrs	r3, 6
    2434:	06 c0       	rjmp	.+12     	; 0x2442 <vfprintf+0xc4>
    2436:	8a e0       	ldi	r24, 0x0A	; 10
    2438:	98 9e       	mul	r9, r24
    243a:	20 0d       	add	r18, r0
    243c:	11 24       	eor	r1, r1
    243e:	92 2e       	mov	r9, r18
    2440:	11 c0       	rjmp	.+34     	; 0x2464 <vfprintf+0xe6>
    2442:	ea e0       	ldi	r30, 0x0A	; 10
    2444:	2e 9e       	mul	r2, r30
    2446:	20 0d       	add	r18, r0
    2448:	11 24       	eor	r1, r1
    244a:	22 2e       	mov	r2, r18
    244c:	f3 2d       	mov	r31, r3
    244e:	f0 62       	ori	r31, 0x20	; 32
    2450:	3f 2e       	mov	r3, r31
    2452:	08 c0       	rjmp	.+16     	; 0x2464 <vfprintf+0xe6>
    2454:	8c 36       	cpi	r24, 0x6C	; 108
    2456:	21 f4       	brne	.+8      	; 0x2460 <vfprintf+0xe2>
    2458:	83 2d       	mov	r24, r3
    245a:	80 68       	ori	r24, 0x80	; 128
    245c:	38 2e       	mov	r3, r24
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <vfprintf+0xe6>
    2460:	88 36       	cpi	r24, 0x68	; 104
    2462:	41 f4       	brne	.+16     	; 0x2474 <vfprintf+0xf6>
    2464:	f7 01       	movw	r30, r14
    2466:	93 fd       	sbrc	r25, 3
    2468:	85 91       	lpm	r24, Z+
    246a:	93 ff       	sbrs	r25, 3
    246c:	81 91       	ld	r24, Z+
    246e:	7f 01       	movw	r14, r30
    2470:	81 11       	cpse	r24, r1
    2472:	b3 cf       	rjmp	.-154    	; 0x23da <vfprintf+0x5c>
    2474:	98 2f       	mov	r25, r24
    2476:	9f 7d       	andi	r25, 0xDF	; 223
    2478:	95 54       	subi	r25, 0x45	; 69
    247a:	93 30       	cpi	r25, 0x03	; 3
    247c:	28 f4       	brcc	.+10     	; 0x2488 <vfprintf+0x10a>
    247e:	0c 5f       	subi	r16, 0xFC	; 252
    2480:	1f 4f       	sbci	r17, 0xFF	; 255
    2482:	9f e3       	ldi	r25, 0x3F	; 63
    2484:	99 83       	std	Y+1, r25	; 0x01
    2486:	0d c0       	rjmp	.+26     	; 0x24a2 <vfprintf+0x124>
    2488:	83 36       	cpi	r24, 0x63	; 99
    248a:	31 f0       	breq	.+12     	; 0x2498 <vfprintf+0x11a>
    248c:	83 37       	cpi	r24, 0x73	; 115
    248e:	71 f0       	breq	.+28     	; 0x24ac <vfprintf+0x12e>
    2490:	83 35       	cpi	r24, 0x53	; 83
    2492:	09 f0       	breq	.+2      	; 0x2496 <vfprintf+0x118>
    2494:	59 c0       	rjmp	.+178    	; 0x2548 <vfprintf+0x1ca>
    2496:	21 c0       	rjmp	.+66     	; 0x24da <vfprintf+0x15c>
    2498:	f8 01       	movw	r30, r16
    249a:	80 81       	ld	r24, Z
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	0e 5f       	subi	r16, 0xFE	; 254
    24a0:	1f 4f       	sbci	r17, 0xFF	; 255
    24a2:	88 24       	eor	r8, r8
    24a4:	83 94       	inc	r8
    24a6:	91 2c       	mov	r9, r1
    24a8:	53 01       	movw	r10, r6
    24aa:	13 c0       	rjmp	.+38     	; 0x24d2 <vfprintf+0x154>
    24ac:	28 01       	movw	r4, r16
    24ae:	f2 e0       	ldi	r31, 0x02	; 2
    24b0:	4f 0e       	add	r4, r31
    24b2:	51 1c       	adc	r5, r1
    24b4:	f8 01       	movw	r30, r16
    24b6:	a0 80       	ld	r10, Z
    24b8:	b1 80       	ldd	r11, Z+1	; 0x01
    24ba:	36 fe       	sbrs	r3, 6
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <vfprintf+0x146>
    24be:	69 2d       	mov	r22, r9
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <vfprintf+0x14a>
    24c4:	6f ef       	ldi	r22, 0xFF	; 255
    24c6:	7f ef       	ldi	r23, 0xFF	; 255
    24c8:	c5 01       	movw	r24, r10
    24ca:	0e 94 ab 13 	call	0x2756	; 0x2756 <strnlen>
    24ce:	4c 01       	movw	r8, r24
    24d0:	82 01       	movw	r16, r4
    24d2:	f3 2d       	mov	r31, r3
    24d4:	ff 77       	andi	r31, 0x7F	; 127
    24d6:	3f 2e       	mov	r3, r31
    24d8:	16 c0       	rjmp	.+44     	; 0x2506 <vfprintf+0x188>
    24da:	28 01       	movw	r4, r16
    24dc:	22 e0       	ldi	r18, 0x02	; 2
    24de:	42 0e       	add	r4, r18
    24e0:	51 1c       	adc	r5, r1
    24e2:	f8 01       	movw	r30, r16
    24e4:	a0 80       	ld	r10, Z
    24e6:	b1 80       	ldd	r11, Z+1	; 0x01
    24e8:	36 fe       	sbrs	r3, 6
    24ea:	03 c0       	rjmp	.+6      	; 0x24f2 <vfprintf+0x174>
    24ec:	69 2d       	mov	r22, r9
    24ee:	70 e0       	ldi	r23, 0x00	; 0
    24f0:	02 c0       	rjmp	.+4      	; 0x24f6 <vfprintf+0x178>
    24f2:	6f ef       	ldi	r22, 0xFF	; 255
    24f4:	7f ef       	ldi	r23, 0xFF	; 255
    24f6:	c5 01       	movw	r24, r10
    24f8:	0e 94 a0 13 	call	0x2740	; 0x2740 <strnlen_P>
    24fc:	4c 01       	movw	r8, r24
    24fe:	f3 2d       	mov	r31, r3
    2500:	f0 68       	ori	r31, 0x80	; 128
    2502:	3f 2e       	mov	r3, r31
    2504:	82 01       	movw	r16, r4
    2506:	33 fc       	sbrc	r3, 3
    2508:	1b c0       	rjmp	.+54     	; 0x2540 <vfprintf+0x1c2>
    250a:	82 2d       	mov	r24, r2
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	88 16       	cp	r8, r24
    2510:	99 06       	cpc	r9, r25
    2512:	b0 f4       	brcc	.+44     	; 0x2540 <vfprintf+0x1c2>
    2514:	b6 01       	movw	r22, r12
    2516:	80 e2       	ldi	r24, 0x20	; 32
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    251e:	2a 94       	dec	r2
    2520:	f4 cf       	rjmp	.-24     	; 0x250a <vfprintf+0x18c>
    2522:	f5 01       	movw	r30, r10
    2524:	37 fc       	sbrc	r3, 7
    2526:	85 91       	lpm	r24, Z+
    2528:	37 fe       	sbrs	r3, 7
    252a:	81 91       	ld	r24, Z+
    252c:	5f 01       	movw	r10, r30
    252e:	b6 01       	movw	r22, r12
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2536:	21 10       	cpse	r2, r1
    2538:	2a 94       	dec	r2
    253a:	21 e0       	ldi	r18, 0x01	; 1
    253c:	82 1a       	sub	r8, r18
    253e:	91 08       	sbc	r9, r1
    2540:	81 14       	cp	r8, r1
    2542:	91 04       	cpc	r9, r1
    2544:	71 f7       	brne	.-36     	; 0x2522 <vfprintf+0x1a4>
    2546:	e8 c0       	rjmp	.+464    	; 0x2718 <vfprintf+0x39a>
    2548:	84 36       	cpi	r24, 0x64	; 100
    254a:	11 f0       	breq	.+4      	; 0x2550 <vfprintf+0x1d2>
    254c:	89 36       	cpi	r24, 0x69	; 105
    254e:	41 f5       	brne	.+80     	; 0x25a0 <vfprintf+0x222>
    2550:	f8 01       	movw	r30, r16
    2552:	37 fe       	sbrs	r3, 7
    2554:	07 c0       	rjmp	.+14     	; 0x2564 <vfprintf+0x1e6>
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	0c 5f       	subi	r16, 0xFC	; 252
    2560:	1f 4f       	sbci	r17, 0xFF	; 255
    2562:	08 c0       	rjmp	.+16     	; 0x2574 <vfprintf+0x1f6>
    2564:	60 81       	ld	r22, Z
    2566:	71 81       	ldd	r23, Z+1	; 0x01
    2568:	07 2e       	mov	r0, r23
    256a:	00 0c       	add	r0, r0
    256c:	88 0b       	sbc	r24, r24
    256e:	99 0b       	sbc	r25, r25
    2570:	0e 5f       	subi	r16, 0xFE	; 254
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	f3 2d       	mov	r31, r3
    2576:	ff 76       	andi	r31, 0x6F	; 111
    2578:	3f 2e       	mov	r3, r31
    257a:	97 ff       	sbrs	r25, 7
    257c:	09 c0       	rjmp	.+18     	; 0x2590 <vfprintf+0x212>
    257e:	90 95       	com	r25
    2580:	80 95       	com	r24
    2582:	70 95       	com	r23
    2584:	61 95       	neg	r22
    2586:	7f 4f       	sbci	r23, 0xFF	; 255
    2588:	8f 4f       	sbci	r24, 0xFF	; 255
    258a:	9f 4f       	sbci	r25, 0xFF	; 255
    258c:	f0 68       	ori	r31, 0x80	; 128
    258e:	3f 2e       	mov	r3, r31
    2590:	2a e0       	ldi	r18, 0x0A	; 10
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	a3 01       	movw	r20, r6
    2596:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__ultoa_invert>
    259a:	88 2e       	mov	r8, r24
    259c:	86 18       	sub	r8, r6
    259e:	45 c0       	rjmp	.+138    	; 0x262a <vfprintf+0x2ac>
    25a0:	85 37       	cpi	r24, 0x75	; 117
    25a2:	31 f4       	brne	.+12     	; 0x25b0 <vfprintf+0x232>
    25a4:	23 2d       	mov	r18, r3
    25a6:	2f 7e       	andi	r18, 0xEF	; 239
    25a8:	b2 2e       	mov	r11, r18
    25aa:	2a e0       	ldi	r18, 0x0A	; 10
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	25 c0       	rjmp	.+74     	; 0x25fa <vfprintf+0x27c>
    25b0:	93 2d       	mov	r25, r3
    25b2:	99 7f       	andi	r25, 0xF9	; 249
    25b4:	b9 2e       	mov	r11, r25
    25b6:	8f 36       	cpi	r24, 0x6F	; 111
    25b8:	c1 f0       	breq	.+48     	; 0x25ea <vfprintf+0x26c>
    25ba:	18 f4       	brcc	.+6      	; 0x25c2 <vfprintf+0x244>
    25bc:	88 35       	cpi	r24, 0x58	; 88
    25be:	79 f0       	breq	.+30     	; 0x25de <vfprintf+0x260>
    25c0:	b5 c0       	rjmp	.+362    	; 0x272c <vfprintf+0x3ae>
    25c2:	80 37       	cpi	r24, 0x70	; 112
    25c4:	19 f0       	breq	.+6      	; 0x25cc <vfprintf+0x24e>
    25c6:	88 37       	cpi	r24, 0x78	; 120
    25c8:	21 f0       	breq	.+8      	; 0x25d2 <vfprintf+0x254>
    25ca:	b0 c0       	rjmp	.+352    	; 0x272c <vfprintf+0x3ae>
    25cc:	e9 2f       	mov	r30, r25
    25ce:	e0 61       	ori	r30, 0x10	; 16
    25d0:	be 2e       	mov	r11, r30
    25d2:	b4 fe       	sbrs	r11, 4
    25d4:	0d c0       	rjmp	.+26     	; 0x25f0 <vfprintf+0x272>
    25d6:	fb 2d       	mov	r31, r11
    25d8:	f4 60       	ori	r31, 0x04	; 4
    25da:	bf 2e       	mov	r11, r31
    25dc:	09 c0       	rjmp	.+18     	; 0x25f0 <vfprintf+0x272>
    25de:	34 fe       	sbrs	r3, 4
    25e0:	0a c0       	rjmp	.+20     	; 0x25f6 <vfprintf+0x278>
    25e2:	29 2f       	mov	r18, r25
    25e4:	26 60       	ori	r18, 0x06	; 6
    25e6:	b2 2e       	mov	r11, r18
    25e8:	06 c0       	rjmp	.+12     	; 0x25f6 <vfprintf+0x278>
    25ea:	28 e0       	ldi	r18, 0x08	; 8
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	05 c0       	rjmp	.+10     	; 0x25fa <vfprintf+0x27c>
    25f0:	20 e1       	ldi	r18, 0x10	; 16
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <vfprintf+0x27c>
    25f6:	20 e1       	ldi	r18, 0x10	; 16
    25f8:	32 e0       	ldi	r19, 0x02	; 2
    25fa:	f8 01       	movw	r30, r16
    25fc:	b7 fe       	sbrs	r11, 7
    25fe:	07 c0       	rjmp	.+14     	; 0x260e <vfprintf+0x290>
    2600:	60 81       	ld	r22, Z
    2602:	71 81       	ldd	r23, Z+1	; 0x01
    2604:	82 81       	ldd	r24, Z+2	; 0x02
    2606:	93 81       	ldd	r25, Z+3	; 0x03
    2608:	0c 5f       	subi	r16, 0xFC	; 252
    260a:	1f 4f       	sbci	r17, 0xFF	; 255
    260c:	06 c0       	rjmp	.+12     	; 0x261a <vfprintf+0x29c>
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	0e 5f       	subi	r16, 0xFE	; 254
    2618:	1f 4f       	sbci	r17, 0xFF	; 255
    261a:	a3 01       	movw	r20, r6
    261c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__ultoa_invert>
    2620:	88 2e       	mov	r8, r24
    2622:	86 18       	sub	r8, r6
    2624:	fb 2d       	mov	r31, r11
    2626:	ff 77       	andi	r31, 0x7F	; 127
    2628:	3f 2e       	mov	r3, r31
    262a:	36 fe       	sbrs	r3, 6
    262c:	0d c0       	rjmp	.+26     	; 0x2648 <vfprintf+0x2ca>
    262e:	23 2d       	mov	r18, r3
    2630:	2e 7f       	andi	r18, 0xFE	; 254
    2632:	a2 2e       	mov	r10, r18
    2634:	89 14       	cp	r8, r9
    2636:	58 f4       	brcc	.+22     	; 0x264e <vfprintf+0x2d0>
    2638:	34 fe       	sbrs	r3, 4
    263a:	0b c0       	rjmp	.+22     	; 0x2652 <vfprintf+0x2d4>
    263c:	32 fc       	sbrc	r3, 2
    263e:	09 c0       	rjmp	.+18     	; 0x2652 <vfprintf+0x2d4>
    2640:	83 2d       	mov	r24, r3
    2642:	8e 7e       	andi	r24, 0xEE	; 238
    2644:	a8 2e       	mov	r10, r24
    2646:	05 c0       	rjmp	.+10     	; 0x2652 <vfprintf+0x2d4>
    2648:	b8 2c       	mov	r11, r8
    264a:	a3 2c       	mov	r10, r3
    264c:	03 c0       	rjmp	.+6      	; 0x2654 <vfprintf+0x2d6>
    264e:	b8 2c       	mov	r11, r8
    2650:	01 c0       	rjmp	.+2      	; 0x2654 <vfprintf+0x2d6>
    2652:	b9 2c       	mov	r11, r9
    2654:	a4 fe       	sbrs	r10, 4
    2656:	0f c0       	rjmp	.+30     	; 0x2676 <vfprintf+0x2f8>
    2658:	fe 01       	movw	r30, r28
    265a:	e8 0d       	add	r30, r8
    265c:	f1 1d       	adc	r31, r1
    265e:	80 81       	ld	r24, Z
    2660:	80 33       	cpi	r24, 0x30	; 48
    2662:	21 f4       	brne	.+8      	; 0x266c <vfprintf+0x2ee>
    2664:	9a 2d       	mov	r25, r10
    2666:	99 7e       	andi	r25, 0xE9	; 233
    2668:	a9 2e       	mov	r10, r25
    266a:	09 c0       	rjmp	.+18     	; 0x267e <vfprintf+0x300>
    266c:	a2 fe       	sbrs	r10, 2
    266e:	06 c0       	rjmp	.+12     	; 0x267c <vfprintf+0x2fe>
    2670:	b3 94       	inc	r11
    2672:	b3 94       	inc	r11
    2674:	04 c0       	rjmp	.+8      	; 0x267e <vfprintf+0x300>
    2676:	8a 2d       	mov	r24, r10
    2678:	86 78       	andi	r24, 0x86	; 134
    267a:	09 f0       	breq	.+2      	; 0x267e <vfprintf+0x300>
    267c:	b3 94       	inc	r11
    267e:	a3 fc       	sbrc	r10, 3
    2680:	11 c0       	rjmp	.+34     	; 0x26a4 <vfprintf+0x326>
    2682:	a0 fe       	sbrs	r10, 0
    2684:	06 c0       	rjmp	.+12     	; 0x2692 <vfprintf+0x314>
    2686:	b2 14       	cp	r11, r2
    2688:	88 f4       	brcc	.+34     	; 0x26ac <vfprintf+0x32e>
    268a:	28 0c       	add	r2, r8
    268c:	92 2c       	mov	r9, r2
    268e:	9b 18       	sub	r9, r11
    2690:	0e c0       	rjmp	.+28     	; 0x26ae <vfprintf+0x330>
    2692:	b2 14       	cp	r11, r2
    2694:	60 f4       	brcc	.+24     	; 0x26ae <vfprintf+0x330>
    2696:	b6 01       	movw	r22, r12
    2698:	80 e2       	ldi	r24, 0x20	; 32
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    26a0:	b3 94       	inc	r11
    26a2:	f7 cf       	rjmp	.-18     	; 0x2692 <vfprintf+0x314>
    26a4:	b2 14       	cp	r11, r2
    26a6:	18 f4       	brcc	.+6      	; 0x26ae <vfprintf+0x330>
    26a8:	2b 18       	sub	r2, r11
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <vfprintf+0x332>
    26ac:	98 2c       	mov	r9, r8
    26ae:	21 2c       	mov	r2, r1
    26b0:	a4 fe       	sbrs	r10, 4
    26b2:	10 c0       	rjmp	.+32     	; 0x26d4 <vfprintf+0x356>
    26b4:	b6 01       	movw	r22, r12
    26b6:	80 e3       	ldi	r24, 0x30	; 48
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    26be:	a2 fe       	sbrs	r10, 2
    26c0:	17 c0       	rjmp	.+46     	; 0x26f0 <vfprintf+0x372>
    26c2:	a1 fc       	sbrc	r10, 1
    26c4:	03 c0       	rjmp	.+6      	; 0x26cc <vfprintf+0x34e>
    26c6:	88 e7       	ldi	r24, 0x78	; 120
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <vfprintf+0x352>
    26cc:	88 e5       	ldi	r24, 0x58	; 88
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	b6 01       	movw	r22, r12
    26d2:	0c c0       	rjmp	.+24     	; 0x26ec <vfprintf+0x36e>
    26d4:	8a 2d       	mov	r24, r10
    26d6:	86 78       	andi	r24, 0x86	; 134
    26d8:	59 f0       	breq	.+22     	; 0x26f0 <vfprintf+0x372>
    26da:	a1 fe       	sbrs	r10, 1
    26dc:	02 c0       	rjmp	.+4      	; 0x26e2 <vfprintf+0x364>
    26de:	8b e2       	ldi	r24, 0x2B	; 43
    26e0:	01 c0       	rjmp	.+2      	; 0x26e4 <vfprintf+0x366>
    26e2:	80 e2       	ldi	r24, 0x20	; 32
    26e4:	a7 fc       	sbrc	r10, 7
    26e6:	8d e2       	ldi	r24, 0x2D	; 45
    26e8:	b6 01       	movw	r22, r12
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    26f0:	89 14       	cp	r8, r9
    26f2:	38 f4       	brcc	.+14     	; 0x2702 <vfprintf+0x384>
    26f4:	b6 01       	movw	r22, r12
    26f6:	80 e3       	ldi	r24, 0x30	; 48
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    26fe:	9a 94       	dec	r9
    2700:	f7 cf       	rjmp	.-18     	; 0x26f0 <vfprintf+0x372>
    2702:	8a 94       	dec	r8
    2704:	f3 01       	movw	r30, r6
    2706:	e8 0d       	add	r30, r8
    2708:	f1 1d       	adc	r31, r1
    270a:	80 81       	ld	r24, Z
    270c:	b6 01       	movw	r22, r12
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2714:	81 10       	cpse	r8, r1
    2716:	f5 cf       	rjmp	.-22     	; 0x2702 <vfprintf+0x384>
    2718:	22 20       	and	r2, r2
    271a:	09 f4       	brne	.+2      	; 0x271e <vfprintf+0x3a0>
    271c:	42 ce       	rjmp	.-892    	; 0x23a2 <vfprintf+0x24>
    271e:	b6 01       	movw	r22, r12
    2720:	80 e2       	ldi	r24, 0x20	; 32
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	0e 94 b6 13 	call	0x276c	; 0x276c <fputc>
    2728:	2a 94       	dec	r2
    272a:	f6 cf       	rjmp	.-20     	; 0x2718 <vfprintf+0x39a>
    272c:	f6 01       	movw	r30, r12
    272e:	86 81       	ldd	r24, Z+6	; 0x06
    2730:	97 81       	ldd	r25, Z+7	; 0x07
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <vfprintf+0x3ba>
    2734:	8f ef       	ldi	r24, 0xFF	; 255
    2736:	9f ef       	ldi	r25, 0xFF	; 255
    2738:	2b 96       	adiw	r28, 0x0b	; 11
    273a:	e2 e1       	ldi	r30, 0x12	; 18
    273c:	0c 94 94 14 	jmp	0x2928	; 0x2928 <__epilogue_restores__>

00002740 <strnlen_P>:
    2740:	fc 01       	movw	r30, r24
    2742:	05 90       	lpm	r0, Z+
    2744:	61 50       	subi	r22, 0x01	; 1
    2746:	70 40       	sbci	r23, 0x00	; 0
    2748:	01 10       	cpse	r0, r1
    274a:	d8 f7       	brcc	.-10     	; 0x2742 <strnlen_P+0x2>
    274c:	80 95       	com	r24
    274e:	90 95       	com	r25
    2750:	8e 0f       	add	r24, r30
    2752:	9f 1f       	adc	r25, r31
    2754:	08 95       	ret

00002756 <strnlen>:
    2756:	fc 01       	movw	r30, r24
    2758:	61 50       	subi	r22, 0x01	; 1
    275a:	70 40       	sbci	r23, 0x00	; 0
    275c:	01 90       	ld	r0, Z+
    275e:	01 10       	cpse	r0, r1
    2760:	d8 f7       	brcc	.-10     	; 0x2758 <strnlen+0x2>
    2762:	80 95       	com	r24
    2764:	90 95       	com	r25
    2766:	8e 0f       	add	r24, r30
    2768:	9f 1f       	adc	r25, r31
    276a:	08 95       	ret

0000276c <fputc>:
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	fb 01       	movw	r30, r22
    2776:	23 81       	ldd	r18, Z+3	; 0x03
    2778:	21 fd       	sbrc	r18, 1
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <fputc+0x16>
    277c:	8f ef       	ldi	r24, 0xFF	; 255
    277e:	9f ef       	ldi	r25, 0xFF	; 255
    2780:	2c c0       	rjmp	.+88     	; 0x27da <fputc+0x6e>
    2782:	22 ff       	sbrs	r18, 2
    2784:	16 c0       	rjmp	.+44     	; 0x27b2 <fputc+0x46>
    2786:	46 81       	ldd	r20, Z+6	; 0x06
    2788:	57 81       	ldd	r21, Z+7	; 0x07
    278a:	24 81       	ldd	r18, Z+4	; 0x04
    278c:	35 81       	ldd	r19, Z+5	; 0x05
    278e:	42 17       	cp	r20, r18
    2790:	53 07       	cpc	r21, r19
    2792:	44 f4       	brge	.+16     	; 0x27a4 <fputc+0x38>
    2794:	a0 81       	ld	r26, Z
    2796:	b1 81       	ldd	r27, Z+1	; 0x01
    2798:	9d 01       	movw	r18, r26
    279a:	2f 5f       	subi	r18, 0xFF	; 255
    279c:	3f 4f       	sbci	r19, 0xFF	; 255
    279e:	31 83       	std	Z+1, r19	; 0x01
    27a0:	20 83       	st	Z, r18
    27a2:	8c 93       	st	X, r24
    27a4:	26 81       	ldd	r18, Z+6	; 0x06
    27a6:	37 81       	ldd	r19, Z+7	; 0x07
    27a8:	2f 5f       	subi	r18, 0xFF	; 255
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	37 83       	std	Z+7, r19	; 0x07
    27ae:	26 83       	std	Z+6, r18	; 0x06
    27b0:	14 c0       	rjmp	.+40     	; 0x27da <fputc+0x6e>
    27b2:	8b 01       	movw	r16, r22
    27b4:	ec 01       	movw	r28, r24
    27b6:	fb 01       	movw	r30, r22
    27b8:	00 84       	ldd	r0, Z+8	; 0x08
    27ba:	f1 85       	ldd	r31, Z+9	; 0x09
    27bc:	e0 2d       	mov	r30, r0
    27be:	09 95       	icall
    27c0:	89 2b       	or	r24, r25
    27c2:	e1 f6       	brne	.-72     	; 0x277c <fputc+0x10>
    27c4:	d8 01       	movw	r26, r16
    27c6:	16 96       	adiw	r26, 0x06	; 6
    27c8:	8d 91       	ld	r24, X+
    27ca:	9c 91       	ld	r25, X
    27cc:	17 97       	sbiw	r26, 0x07	; 7
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	17 96       	adiw	r26, 0x07	; 7
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
    27d6:	16 97       	sbiw	r26, 0x06	; 6
    27d8:	ce 01       	movw	r24, r28
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <__ultoa_invert>:
    27e4:	fa 01       	movw	r30, r20
    27e6:	aa 27       	eor	r26, r26
    27e8:	28 30       	cpi	r18, 0x08	; 8
    27ea:	51 f1       	breq	.+84     	; 0x2840 <__ultoa_invert+0x5c>
    27ec:	20 31       	cpi	r18, 0x10	; 16
    27ee:	81 f1       	breq	.+96     	; 0x2850 <__ultoa_invert+0x6c>
    27f0:	e8 94       	clt
    27f2:	6f 93       	push	r22
    27f4:	6e 7f       	andi	r22, 0xFE	; 254
    27f6:	6e 5f       	subi	r22, 0xFE	; 254
    27f8:	7f 4f       	sbci	r23, 0xFF	; 255
    27fa:	8f 4f       	sbci	r24, 0xFF	; 255
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	af 4f       	sbci	r26, 0xFF	; 255
    2800:	b1 e0       	ldi	r27, 0x01	; 1
    2802:	3e d0       	rcall	.+124    	; 0x2880 <__ultoa_invert+0x9c>
    2804:	b4 e0       	ldi	r27, 0x04	; 4
    2806:	3c d0       	rcall	.+120    	; 0x2880 <__ultoa_invert+0x9c>
    2808:	67 0f       	add	r22, r23
    280a:	78 1f       	adc	r23, r24
    280c:	89 1f       	adc	r24, r25
    280e:	9a 1f       	adc	r25, r26
    2810:	a1 1d       	adc	r26, r1
    2812:	68 0f       	add	r22, r24
    2814:	79 1f       	adc	r23, r25
    2816:	8a 1f       	adc	r24, r26
    2818:	91 1d       	adc	r25, r1
    281a:	a1 1d       	adc	r26, r1
    281c:	6a 0f       	add	r22, r26
    281e:	71 1d       	adc	r23, r1
    2820:	81 1d       	adc	r24, r1
    2822:	91 1d       	adc	r25, r1
    2824:	a1 1d       	adc	r26, r1
    2826:	20 d0       	rcall	.+64     	; 0x2868 <__ultoa_invert+0x84>
    2828:	09 f4       	brne	.+2      	; 0x282c <__ultoa_invert+0x48>
    282a:	68 94       	set
    282c:	3f 91       	pop	r19
    282e:	2a e0       	ldi	r18, 0x0A	; 10
    2830:	26 9f       	mul	r18, r22
    2832:	11 24       	eor	r1, r1
    2834:	30 19       	sub	r19, r0
    2836:	30 5d       	subi	r19, 0xD0	; 208
    2838:	31 93       	st	Z+, r19
    283a:	de f6       	brtc	.-74     	; 0x27f2 <__ultoa_invert+0xe>
    283c:	cf 01       	movw	r24, r30
    283e:	08 95       	ret
    2840:	46 2f       	mov	r20, r22
    2842:	47 70       	andi	r20, 0x07	; 7
    2844:	40 5d       	subi	r20, 0xD0	; 208
    2846:	41 93       	st	Z+, r20
    2848:	b3 e0       	ldi	r27, 0x03	; 3
    284a:	0f d0       	rcall	.+30     	; 0x286a <__ultoa_invert+0x86>
    284c:	c9 f7       	brne	.-14     	; 0x2840 <__ultoa_invert+0x5c>
    284e:	f6 cf       	rjmp	.-20     	; 0x283c <__ultoa_invert+0x58>
    2850:	46 2f       	mov	r20, r22
    2852:	4f 70       	andi	r20, 0x0F	; 15
    2854:	40 5d       	subi	r20, 0xD0	; 208
    2856:	4a 33       	cpi	r20, 0x3A	; 58
    2858:	18 f0       	brcs	.+6      	; 0x2860 <__ultoa_invert+0x7c>
    285a:	49 5d       	subi	r20, 0xD9	; 217
    285c:	31 fd       	sbrc	r19, 1
    285e:	40 52       	subi	r20, 0x20	; 32
    2860:	41 93       	st	Z+, r20
    2862:	02 d0       	rcall	.+4      	; 0x2868 <__ultoa_invert+0x84>
    2864:	a9 f7       	brne	.-22     	; 0x2850 <__ultoa_invert+0x6c>
    2866:	ea cf       	rjmp	.-44     	; 0x283c <__ultoa_invert+0x58>
    2868:	b4 e0       	ldi	r27, 0x04	; 4
    286a:	a6 95       	lsr	r26
    286c:	97 95       	ror	r25
    286e:	87 95       	ror	r24
    2870:	77 95       	ror	r23
    2872:	67 95       	ror	r22
    2874:	ba 95       	dec	r27
    2876:	c9 f7       	brne	.-14     	; 0x286a <__ultoa_invert+0x86>
    2878:	00 97       	sbiw	r24, 0x00	; 0
    287a:	61 05       	cpc	r22, r1
    287c:	71 05       	cpc	r23, r1
    287e:	08 95       	ret
    2880:	9b 01       	movw	r18, r22
    2882:	ac 01       	movw	r20, r24
    2884:	0a 2e       	mov	r0, r26
    2886:	06 94       	lsr	r0
    2888:	57 95       	ror	r21
    288a:	47 95       	ror	r20
    288c:	37 95       	ror	r19
    288e:	27 95       	ror	r18
    2890:	ba 95       	dec	r27
    2892:	c9 f7       	brne	.-14     	; 0x2886 <__ultoa_invert+0xa2>
    2894:	62 0f       	add	r22, r18
    2896:	73 1f       	adc	r23, r19
    2898:	84 1f       	adc	r24, r20
    289a:	95 1f       	adc	r25, r21
    289c:	a0 1d       	adc	r26, r0
    289e:	08 95       	ret

000028a0 <eeprom_read_block>:
    28a0:	dc 01       	movw	r26, r24
    28a2:	cb 01       	movw	r24, r22

000028a4 <eeprom_read_blraw>:
    28a4:	fc 01       	movw	r30, r24
    28a6:	f9 99       	sbic	0x1f, 1	; 31
    28a8:	fe cf       	rjmp	.-4      	; 0x28a6 <eeprom_read_blraw+0x2>
    28aa:	06 c0       	rjmp	.+12     	; 0x28b8 <eeprom_read_blraw+0x14>
    28ac:	f2 bd       	out	0x22, r31	; 34
    28ae:	e1 bd       	out	0x21, r30	; 33
    28b0:	f8 9a       	sbi	0x1f, 0	; 31
    28b2:	31 96       	adiw	r30, 0x01	; 1
    28b4:	00 b4       	in	r0, 0x20	; 32
    28b6:	0d 92       	st	X+, r0
    28b8:	41 50       	subi	r20, 0x01	; 1
    28ba:	50 40       	sbci	r21, 0x00	; 0
    28bc:	b8 f7       	brcc	.-18     	; 0x28ac <eeprom_read_blraw+0x8>
    28be:	08 95       	ret

000028c0 <eeprom_write_block>:
    28c0:	dc 01       	movw	r26, r24
    28c2:	cb 01       	movw	r24, r22
    28c4:	03 c0       	rjmp	.+6      	; 0x28cc <eeprom_write_block+0xc>
    28c6:	2d 91       	ld	r18, X+
    28c8:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <eeprom_write_r18>
    28cc:	41 50       	subi	r20, 0x01	; 1
    28ce:	50 40       	sbci	r21, 0x00	; 0
    28d0:	d0 f7       	brcc	.-12     	; 0x28c6 <eeprom_write_block+0x6>
    28d2:	08 95       	ret

000028d4 <eeprom_write_byte>:
    28d4:	26 2f       	mov	r18, r22

000028d6 <eeprom_write_r18>:
    28d6:	f9 99       	sbic	0x1f, 1	; 31
    28d8:	fe cf       	rjmp	.-4      	; 0x28d6 <eeprom_write_r18>
    28da:	1f ba       	out	0x1f, r1	; 31
    28dc:	92 bd       	out	0x22, r25	; 34
    28de:	81 bd       	out	0x21, r24	; 33
    28e0:	20 bd       	out	0x20, r18	; 32
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	fa 9a       	sbi	0x1f, 2	; 31
    28e8:	f9 9a       	sbi	0x1f, 1	; 31
    28ea:	0f be       	out	0x3f, r0	; 63
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	08 95       	ret

000028f0 <__prologue_saves__>:
    28f0:	2f 92       	push	r2
    28f2:	3f 92       	push	r3
    28f4:	4f 92       	push	r4
    28f6:	5f 92       	push	r5
    28f8:	6f 92       	push	r6
    28fa:	7f 92       	push	r7
    28fc:	8f 92       	push	r8
    28fe:	9f 92       	push	r9
    2900:	af 92       	push	r10
    2902:	bf 92       	push	r11
    2904:	cf 92       	push	r12
    2906:	df 92       	push	r13
    2908:	ef 92       	push	r14
    290a:	ff 92       	push	r15
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	cf 93       	push	r28
    2912:	df 93       	push	r29
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	ca 1b       	sub	r28, r26
    291a:	db 0b       	sbc	r29, r27
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	09 94       	ijmp

00002928 <__epilogue_restores__>:
    2928:	2a 88       	ldd	r2, Y+18	; 0x12
    292a:	39 88       	ldd	r3, Y+17	; 0x11
    292c:	48 88       	ldd	r4, Y+16	; 0x10
    292e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2930:	6e 84       	ldd	r6, Y+14	; 0x0e
    2932:	7d 84       	ldd	r7, Y+13	; 0x0d
    2934:	8c 84       	ldd	r8, Y+12	; 0x0c
    2936:	9b 84       	ldd	r9, Y+11	; 0x0b
    2938:	aa 84       	ldd	r10, Y+10	; 0x0a
    293a:	b9 84       	ldd	r11, Y+9	; 0x09
    293c:	c8 84       	ldd	r12, Y+8	; 0x08
    293e:	df 80       	ldd	r13, Y+7	; 0x07
    2940:	ee 80       	ldd	r14, Y+6	; 0x06
    2942:	fd 80       	ldd	r15, Y+5	; 0x05
    2944:	0c 81       	ldd	r16, Y+4	; 0x04
    2946:	1b 81       	ldd	r17, Y+3	; 0x03
    2948:	aa 81       	ldd	r26, Y+2	; 0x02
    294a:	b9 81       	ldd	r27, Y+1	; 0x01
    294c:	ce 0f       	add	r28, r30
    294e:	d1 1d       	adc	r29, r1
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	ed 01       	movw	r28, r26
    295c:	08 95       	ret

0000295e <_exit>:
    295e:	f8 94       	cli

00002960 <__stop_program>:
    2960:	ff cf       	rjmp	.-2      	; 0x2960 <__stop_program>
